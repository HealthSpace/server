{
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "string",
          "name": "_ethToken",
          "type": "string"
        }
      ],
      "name": "RetrieveHashData",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "string",
          "name": "_ethToken",
          "type": "string"
        }
      ],
      "name": "RetrievePrivateKey",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_ehToken",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_userHash",
          "type": "string"
        }
      ],
      "name": "addUserHash",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_ehToken",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_privateKey",
          "type": "string"
        }
      ],
      "name": "addUserKey",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_ehToken",
          "type": "string"
        }
      ],
      "name": "getUserHashData",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_ehToken",
          "type": "string"
        }
      ],
      "name": "getUserKey",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "allSourcePaths": {
    "0": "/home/anonshubh/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.5.0/contracts/access/Ownable.sol",
    "1": "/home/anonshubh/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.5.0/contracts/utils/Context.sol",
    "2": "contracts/EMR.sol"
  },
  "ast": {
    "absolutePath": "contracts/EMR.sol",
    "exportedSymbols": {
      "Context": [
        261
      ],
      "EMR": [
        134
      ],
      "Ownable": [
        239
      ]
    },
    "id": 135,
    "license": "MIT",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 1,
        "literals": [
          "solidity",
          "^",
          "0.8"
        ],
        "nodeType": "PragmaDirective",
        "src": "33:21:2"
      },
      {
        "absolutePath": "/home/anonshubh/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.5.0/contracts/access/Ownable.sol",
        "file": "@openzeppelin/contracts/access/Ownable.sol",
        "id": 2,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 135,
        "sourceUnit": 240,
        "src": "56:52:2",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 3,
              "name": "Ownable",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 239,
              "src": "126:7:2"
            },
            "id": 4,
            "nodeType": "InheritanceSpecifier",
            "src": "126:7:2"
          }
        ],
        "canonicalName": "EMR",
        "contractDependencies": [],
        "contractKind": "contract",
        "fullyImplemented": true,
        "id": 134,
        "linearizedBaseContracts": [
          134,
          239,
          261
        ],
        "name": "EMR",
        "nameLocation": "119:3:2",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "canonicalName": "EMR.UserDetails",
            "id": 11,
            "members": [
              {
                "constant": false,
                "id": 6,
                "mutability": "mutable",
                "name": "privateKey",
                "nameLocation": "176:10:2",
                "nodeType": "VariableDeclaration",
                "scope": 11,
                "src": "169:17:2",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_string_storage_ptr",
                  "typeString": "string"
                },
                "typeName": {
                  "id": 5,
                  "name": "string",
                  "nodeType": "ElementaryTypeName",
                  "src": "169:6:2",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_storage_ptr",
                    "typeString": "string"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 8,
                "mutability": "mutable",
                "name": "hashData",
                "nameLocation": "203:8:2",
                "nodeType": "VariableDeclaration",
                "scope": 11,
                "src": "196:15:2",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_string_storage_ptr",
                  "typeString": "string"
                },
                "typeName": {
                  "id": 7,
                  "name": "string",
                  "nodeType": "ElementaryTypeName",
                  "src": "196:6:2",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_storage_ptr",
                    "typeString": "string"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 10,
                "mutability": "mutable",
                "name": "isActive",
                "nameLocation": "226:8:2",
                "nodeType": "VariableDeclaration",
                "scope": 11,
                "src": "221:13:2",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_bool",
                  "typeString": "bool"
                },
                "typeName": {
                  "id": 9,
                  "name": "bool",
                  "nodeType": "ElementaryTypeName",
                  "src": "221:4:2",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  }
                },
                "visibility": "internal"
              }
            ],
            "name": "UserDetails",
            "nameLocation": "147:11:2",
            "nodeType": "StructDefinition",
            "scope": 134,
            "src": "140:101:2",
            "visibility": "public"
          },
          {
            "anonymous": false,
            "id": 17,
            "name": "RetrieveHashData",
            "nameLocation": "253:16:2",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 16,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 13,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "_from",
                  "nameLocation": "286:5:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 17,
                  "src": "270:21:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 12,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "270:7:2",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 15,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "_ethToken",
                  "nameLocation": "308:9:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 17,
                  "src": "293:24:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 14,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "293:6:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "269:49:2"
            },
            "src": "247:72:2"
          },
          {
            "anonymous": false,
            "id": 23,
            "name": "RetrievePrivateKey",
            "nameLocation": "330:18:2",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 22,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 19,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "_from",
                  "nameLocation": "365:5:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 23,
                  "src": "349:21:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 18,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "349:7:2",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 21,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "_ethToken",
                  "nameLocation": "387:9:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 23,
                  "src": "372:24:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 20,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "372:6:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "348:49:2"
            },
            "src": "324:74:2"
          },
          {
            "constant": false,
            "id": 28,
            "mutability": "mutable",
            "name": "patient",
            "nameLocation": "435:7:2",
            "nodeType": "VariableDeclaration",
            "scope": 134,
            "src": "404:38:2",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_string_memory_ptr_$_t_struct$_UserDetails_$11_storage_$",
              "typeString": "mapping(string => struct EMR.UserDetails)"
            },
            "typeName": {
              "id": 27,
              "keyType": {
                "id": 24,
                "name": "string",
                "nodeType": "ElementaryTypeName",
                "src": "412:6:2",
                "typeDescriptions": {
                  "typeIdentifier": "t_string_storage_ptr",
                  "typeString": "string"
                }
              },
              "nodeType": "Mapping",
              "src": "404:30:2",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_string_memory_ptr_$_t_struct$_UserDetails_$11_storage_$",
                "typeString": "mapping(string => struct EMR.UserDetails)"
              },
              "valueType": {
                "id": 26,
                "nodeType": "UserDefinedTypeName",
                "pathNode": {
                  "id": 25,
                  "name": "UserDetails",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 11,
                  "src": "422:11:2"
                },
                "referencedDeclaration": 11,
                "src": "422:11:2",
                "typeDescriptions": {
                  "typeIdentifier": "t_struct$_UserDetails_$11_storage_ptr",
                  "typeString": "struct EMR.UserDetails"
                }
              }
            },
            "visibility": "internal"
          },
          {
            "body": {
              "id": 56,
              "nodeType": "Block",
              "src": "593:173:2",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "expression": {
                          "baseExpression": {
                            "id": 38,
                            "name": "patient",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 28,
                            "src": "611:7:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_string_memory_ptr_$_t_struct$_UserDetails_$11_storage_$",
                              "typeString": "mapping(string memory => struct EMR.UserDetails storage ref)"
                            }
                          },
                          "id": 40,
                          "indexExpression": {
                            "id": 39,
                            "name": "_ehToken",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 30,
                            "src": "619:8:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_string_memory_ptr",
                              "typeString": "string memory"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "611:17:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_UserDetails_$11_storage",
                            "typeString": "struct EMR.UserDetails storage ref"
                          }
                        },
                        "id": 41,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "isActive",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 10,
                        "src": "611:26:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "4e6f2050617469656e7420466f756e6421",
                        "id": 42,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "639:19:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_3816d7abfbe8f08ecb76bc1e1c3fc409e75d4a4f9c6128d6f7af052b197d5f2e",
                          "typeString": "literal_string \"No Patient Found!\""
                        },
                        "value": "No Patient Found!"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_3816d7abfbe8f08ecb76bc1e1c3fc409e75d4a4f9c6128d6f7af052b197d5f2e",
                          "typeString": "literal_string \"No Patient Found!\""
                        }
                      ],
                      "id": 37,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "603:7:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 43,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "603:56:2",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 44,
                  "nodeType": "ExpressionStatement",
                  "src": "603:56:2"
                },
                {
                  "eventCall": {
                    "arguments": [
                      {
                        "expression": {
                          "id": 46,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -15,
                          "src": "693:3:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 47,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "src": "693:10:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 48,
                        "name": "_ehToken",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 30,
                        "src": "705:8:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string memory"
                        }
                      ],
                      "id": 45,
                      "name": "RetrievePrivateKey",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 23,
                      "src": "674:18:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (address,string memory)"
                      }
                    },
                    "id": 49,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "674:40:2",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 50,
                  "nodeType": "EmitStatement",
                  "src": "669:45:2"
                },
                {
                  "expression": {
                    "expression": {
                      "baseExpression": {
                        "id": 51,
                        "name": "patient",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 28,
                        "src": "731:7:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_string_memory_ptr_$_t_struct$_UserDetails_$11_storage_$",
                          "typeString": "mapping(string memory => struct EMR.UserDetails storage ref)"
                        }
                      },
                      "id": 53,
                      "indexExpression": {
                        "id": 52,
                        "name": "_ehToken",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 30,
                        "src": "739:8:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string memory"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "IndexAccess",
                      "src": "731:17:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_UserDetails_$11_storage",
                        "typeString": "struct EMR.UserDetails storage ref"
                      }
                    },
                    "id": 54,
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "memberName": "privateKey",
                    "nodeType": "MemberAccess",
                    "referencedDeclaration": 6,
                    "src": "731:28:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage",
                      "typeString": "string storage ref"
                    }
                  },
                  "functionReturnParameters": 36,
                  "id": 55,
                  "nodeType": "Return",
                  "src": "724:35:2"
                }
              ]
            },
            "functionSelector": "2336b932",
            "id": 57,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 33,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 32,
                  "name": "onlyOwner",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 181,
                  "src": "547:9:2"
                },
                "nodeType": "ModifierInvocation",
                "src": "547:9:2"
              }
            ],
            "name": "getUserKey",
            "nameLocation": "489:10:2",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 31,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 30,
                  "mutability": "mutable",
                  "name": "_ehToken",
                  "nameLocation": "514:8:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 57,
                  "src": "500:22:2",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 29,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "500:6:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "499:24:2"
            },
            "returnParameters": {
              "id": 36,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 35,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 57,
                  "src": "574:13:2",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 34,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "574:6:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "573:15:2"
            },
            "scope": 134,
            "src": "480:286:2",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 83,
              "nodeType": "Block",
              "src": "872:169:2",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "expression": {
                          "baseExpression": {
                            "id": 65,
                            "name": "patient",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 28,
                            "src": "890:7:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_string_memory_ptr_$_t_struct$_UserDetails_$11_storage_$",
                              "typeString": "mapping(string memory => struct EMR.UserDetails storage ref)"
                            }
                          },
                          "id": 67,
                          "indexExpression": {
                            "id": 66,
                            "name": "_ehToken",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 59,
                            "src": "898:8:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_string_memory_ptr",
                              "typeString": "string memory"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "890:17:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_UserDetails_$11_storage",
                            "typeString": "struct EMR.UserDetails storage ref"
                          }
                        },
                        "id": 68,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "isActive",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 10,
                        "src": "890:26:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "4e6f2050617469656e7420466f756e6421",
                        "id": 69,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "918:19:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_3816d7abfbe8f08ecb76bc1e1c3fc409e75d4a4f9c6128d6f7af052b197d5f2e",
                          "typeString": "literal_string \"No Patient Found!\""
                        },
                        "value": "No Patient Found!"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_3816d7abfbe8f08ecb76bc1e1c3fc409e75d4a4f9c6128d6f7af052b197d5f2e",
                          "typeString": "literal_string \"No Patient Found!\""
                        }
                      ],
                      "id": 64,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "882:7:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 70,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "882:56:2",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 71,
                  "nodeType": "ExpressionStatement",
                  "src": "882:56:2"
                },
                {
                  "eventCall": {
                    "arguments": [
                      {
                        "expression": {
                          "id": 73,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -15,
                          "src": "970:3:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 74,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "src": "970:10:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 75,
                        "name": "_ehToken",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 59,
                        "src": "982:8:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string memory"
                        }
                      ],
                      "id": 72,
                      "name": "RetrieveHashData",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 17,
                      "src": "953:16:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (address,string memory)"
                      }
                    },
                    "id": 76,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "953:38:2",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 77,
                  "nodeType": "EmitStatement",
                  "src": "948:43:2"
                },
                {
                  "expression": {
                    "expression": {
                      "baseExpression": {
                        "id": 78,
                        "name": "patient",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 28,
                        "src": "1008:7:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_string_memory_ptr_$_t_struct$_UserDetails_$11_storage_$",
                          "typeString": "mapping(string memory => struct EMR.UserDetails storage ref)"
                        }
                      },
                      "id": 80,
                      "indexExpression": {
                        "id": 79,
                        "name": "_ehToken",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 59,
                        "src": "1016:8:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string memory"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "IndexAccess",
                      "src": "1008:17:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_UserDetails_$11_storage",
                        "typeString": "struct EMR.UserDetails storage ref"
                      }
                    },
                    "id": 81,
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "memberName": "hashData",
                    "nodeType": "MemberAccess",
                    "referencedDeclaration": 8,
                    "src": "1008:26:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage",
                      "typeString": "string storage ref"
                    }
                  },
                  "functionReturnParameters": 63,
                  "id": 82,
                  "nodeType": "Return",
                  "src": "1001:33:2"
                }
              ]
            },
            "functionSelector": "5ce54fdb",
            "id": 84,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "getUserHashData",
            "nameLocation": "781:15:2",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 60,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 59,
                  "mutability": "mutable",
                  "name": "_ehToken",
                  "nameLocation": "811:8:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 84,
                  "src": "797:22:2",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 58,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "797:6:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "796:24:2"
            },
            "returnParameters": {
              "id": 63,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 62,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 84,
                  "src": "853:13:2",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 61,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "853:6:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "852:15:2"
            },
            "scope": 134,
            "src": "772:269:2",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 107,
              "nodeType": "Block",
              "src": "1155:102:2",
              "statements": [
                {
                  "expression": {
                    "id": 98,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "expression": {
                        "baseExpression": {
                          "id": 93,
                          "name": "patient",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 28,
                          "src": "1165:7:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_string_memory_ptr_$_t_struct$_UserDetails_$11_storage_$",
                            "typeString": "mapping(string memory => struct EMR.UserDetails storage ref)"
                          }
                        },
                        "id": 95,
                        "indexExpression": {
                          "id": 94,
                          "name": "_ehToken",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 86,
                          "src": "1173:8:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_memory_ptr",
                            "typeString": "string memory"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "1165:17:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_UserDetails_$11_storage",
                          "typeString": "struct EMR.UserDetails storage ref"
                        }
                      },
                      "id": 96,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "privateKey",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 6,
                      "src": "1165:28:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_storage",
                        "typeString": "string storage ref"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 97,
                      "name": "_privateKey",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 88,
                      "src": "1196:11:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_memory_ptr",
                        "typeString": "string memory"
                      }
                    },
                    "src": "1165:42:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage",
                      "typeString": "string storage ref"
                    }
                  },
                  "id": 99,
                  "nodeType": "ExpressionStatement",
                  "src": "1165:42:2"
                },
                {
                  "expression": {
                    "id": 105,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "expression": {
                        "baseExpression": {
                          "id": 100,
                          "name": "patient",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 28,
                          "src": "1217:7:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_string_memory_ptr_$_t_struct$_UserDetails_$11_storage_$",
                            "typeString": "mapping(string memory => struct EMR.UserDetails storage ref)"
                          }
                        },
                        "id": 102,
                        "indexExpression": {
                          "id": 101,
                          "name": "_ehToken",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 86,
                          "src": "1225:8:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_memory_ptr",
                            "typeString": "string memory"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "1217:17:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_UserDetails_$11_storage",
                          "typeString": "struct EMR.UserDetails storage ref"
                        }
                      },
                      "id": 103,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "isActive",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 10,
                      "src": "1217:26:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "hexValue": "74727565",
                      "id": 104,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "bool",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "1246:4:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "value": "true"
                    },
                    "src": "1217:33:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 106,
                  "nodeType": "ExpressionStatement",
                  "src": "1217:33:2"
                }
              ]
            },
            "functionSelector": "f7c89a4b",
            "id": 108,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 91,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 90,
                  "name": "onlyOwner",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 181,
                  "src": "1141:9:2"
                },
                "nodeType": "ModifierInvocation",
                "src": "1141:9:2"
              }
            ],
            "name": "addUserKey",
            "nameLocation": "1056:10:2",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 89,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 86,
                  "mutability": "mutable",
                  "name": "_ehToken",
                  "nameLocation": "1081:8:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 108,
                  "src": "1067:22:2",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 85,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "1067:6:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 88,
                  "mutability": "mutable",
                  "name": "_privateKey",
                  "nameLocation": "1105:11:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 108,
                  "src": "1091:25:2",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 87,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "1091:6:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1066:51:2"
            },
            "returnParameters": {
              "id": 92,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1155:0:2"
            },
            "scope": 134,
            "src": "1047:210:2",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 132,
              "nodeType": "Block",
              "src": "1370:148:2",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "expression": {
                          "baseExpression": {
                            "id": 118,
                            "name": "patient",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 28,
                            "src": "1415:7:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_string_memory_ptr_$_t_struct$_UserDetails_$11_storage_$",
                              "typeString": "mapping(string memory => struct EMR.UserDetails storage ref)"
                            }
                          },
                          "id": 120,
                          "indexExpression": {
                            "id": 119,
                            "name": "_ehToken",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 110,
                            "src": "1423:8:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_string_memory_ptr",
                              "typeString": "string memory"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "1415:17:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_UserDetails_$11_storage",
                            "typeString": "struct EMR.UserDetails storage ref"
                          }
                        },
                        "id": 121,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "isActive",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 10,
                        "src": "1415:26:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "4e6f2050617469656e7420466f756e6421",
                        "id": 122,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "1443:19:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_3816d7abfbe8f08ecb76bc1e1c3fc409e75d4a4f9c6128d6f7af052b197d5f2e",
                          "typeString": "literal_string \"No Patient Found!\""
                        },
                        "value": "No Patient Found!"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_3816d7abfbe8f08ecb76bc1e1c3fc409e75d4a4f9c6128d6f7af052b197d5f2e",
                          "typeString": "literal_string \"No Patient Found!\""
                        }
                      ],
                      "id": 117,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "1407:7:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 123,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1407:56:2",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 124,
                  "nodeType": "ExpressionStatement",
                  "src": "1407:56:2"
                },
                {
                  "expression": {
                    "id": 130,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "expression": {
                        "baseExpression": {
                          "id": 125,
                          "name": "patient",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 28,
                          "src": "1473:7:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_string_memory_ptr_$_t_struct$_UserDetails_$11_storage_$",
                            "typeString": "mapping(string memory => struct EMR.UserDetails storage ref)"
                          }
                        },
                        "id": 127,
                        "indexExpression": {
                          "id": 126,
                          "name": "_ehToken",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 110,
                          "src": "1481:8:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_memory_ptr",
                            "typeString": "string memory"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "1473:17:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_UserDetails_$11_storage",
                          "typeString": "struct EMR.UserDetails storage ref"
                        }
                      },
                      "id": 128,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "hashData",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 8,
                      "src": "1473:26:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_storage",
                        "typeString": "string storage ref"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 129,
                      "name": "_userHash",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 112,
                      "src": "1502:9:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_memory_ptr",
                        "typeString": "string memory"
                      }
                    },
                    "src": "1473:38:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage",
                      "typeString": "string storage ref"
                    }
                  },
                  "id": 131,
                  "nodeType": "ExpressionStatement",
                  "src": "1473:38:2"
                }
              ]
            },
            "functionSelector": "0654aa91",
            "id": 133,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 115,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 114,
                  "name": "onlyOwner",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 181,
                  "src": "1356:9:2"
                },
                "nodeType": "ModifierInvocation",
                "src": "1356:9:2"
              }
            ],
            "name": "addUserHash",
            "nameLocation": "1272:11:2",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 113,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 110,
                  "mutability": "mutable",
                  "name": "_ehToken",
                  "nameLocation": "1298:8:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 133,
                  "src": "1284:22:2",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 109,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "1284:6:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 112,
                  "mutability": "mutable",
                  "name": "_userHash",
                  "nameLocation": "1322:9:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 133,
                  "src": "1308:23:2",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 111,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "1308:6:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1283:49:2"
            },
            "returnParameters": {
              "id": 116,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1370:0:2"
            },
            "scope": 134,
            "src": "1263:255:2",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          }
        ],
        "scope": 135,
        "src": "110:1410:2",
        "usedErrors": []
      }
    ],
    "src": "33:1488:2"
  },
  "bytecode": "608060405234801561001057600080fd5b5061001a3361001f565b61006f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6108ef8061007e6000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c8063715018a61161005b578063715018a6146100d35780638da5cb5b146100db578063f2fde38b146100f6578063f7c89a4b1461010957600080fd5b80630654aa91146100825780632336b932146100975780635ce54fdb146100c0575b600080fd5b6100956100903660046106ce565b61011c565b005b6100aa6100a5366004610732565b6101cb565b6040516100b7919061079f565b60405180910390f35b6100aa6100ce366004610732565b610329565b6100956103d9565b6000546040516001600160a01b0390911681526020016100b7565b6100956101043660046107d2565b61040f565b6100956101173660046106ce565b6104aa565b6000546001600160a01b0316331461014f5760405162461bcd60e51b815260040161014690610802565b60405180910390fd5b60018260405161015f9190610837565b9081526040519081900360200190206002015460ff166101915760405162461bcd60e51b815260040161014690610853565b806001836040516101a29190610837565b908152602001604051809103902060010190805190602001906101c6929190610592565b505050565b6000546060906001600160a01b031633146101f85760405162461bcd60e51b815260040161014690610802565b6001826040516102089190610837565b9081526040519081900360200190206002015460ff1661023a5760405162461bcd60e51b815260040161014690610853565b816040516102489190610837565b6040519081900381209033907f0b8ef4c067762d50f1ea064ddb955a43e3ea90ef38028e9705d871e03460deeb90600090a360018260405161028a9190610837565b90815260405190819003602001902080546102a49061087e565b80601f01602080910402602001604051908101604052809291908181526020018280546102d09061087e565b801561031d5780601f106102f25761010080835404028352916020019161031d565b820191906000526020600020905b81548152906001019060200180831161030057829003601f168201915b50505050509050919050565b606060018260405161033b9190610837565b9081526040519081900360200190206002015460ff1661036d5760405162461bcd60e51b815260040161014690610853565b8160405161037b9190610837565b6040519081900381209033907f5159c5254a9dc3a6d84c7424b5e5032ba56a962dfee368eb1f8bff7d119e69b890600090a36001826040516103bd9190610837565b908152602001604051809103902060010180546102a49061087e565b6000546001600160a01b031633146104035760405162461bcd60e51b815260040161014690610802565b61040d6000610542565b565b6000546001600160a01b031633146104395760405162461bcd60e51b815260040161014690610802565b6001600160a01b03811661049e5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610146565b6104a781610542565b50565b6000546001600160a01b031633146104d45760405162461bcd60e51b815260040161014690610802565b806001836040516104e59190610837565b90815260200160405180910390206000019080519060200190610509929190610592565b506001808360405161051b9190610837565b908152604051908190036020019020600201805491151560ff199092169190911790555050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b82805461059e9061087e565b90600052602060002090601f0160209004810192826105c05760008555610606565b82601f106105d957805160ff1916838001178555610606565b82800160010185558215610606579182015b828111156106065782518255916020019190600101906105eb565b50610612929150610616565b5090565b5b808211156106125760008155600101610617565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261065257600080fd5b813567ffffffffffffffff8082111561066d5761066d61062b565b604051601f8301601f19908116603f011681019082821181831017156106955761069561062b565b816040528381528660208588010111156106ae57600080fd5b836020870160208301376000602085830101528094505050505092915050565b600080604083850312156106e157600080fd5b823567ffffffffffffffff808211156106f957600080fd5b61070586838701610641565b9350602085013591508082111561071b57600080fd5b5061072885828601610641565b9150509250929050565b60006020828403121561074457600080fd5b813567ffffffffffffffff81111561075b57600080fd5b61076784828501610641565b949350505050565b60005b8381101561078a578181015183820152602001610772565b83811115610799576000848401525b50505050565b60208152600082518060208401526107be81604085016020870161076f565b601f01601f19169190910160400192915050565b6000602082840312156107e457600080fd5b81356001600160a01b03811681146107fb57600080fd5b9392505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6000825161084981846020870161076f565b9190910192915050565b6020808252601190820152704e6f2050617469656e7420466f756e642160781b604082015260600190565b600181811c9082168061089257607f821691505b602082108114156108b357634e487b7160e01b600052602260045260246000fd5b5091905056fea2646970667358221220cf2baacaf109244780675244f1cc75fb454212b3b0d09be00b58272adb43758f64736f6c634300080b0033",
  "bytecodeSha1": "f04675ea35a0441bc6fc0ea6a2fc891325b91191",
  "compiler": {
    "evm_version": "istanbul",
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "version": "0.8.11+commit.d7f03943"
  },
  "contractName": "EMR",
  "coverageMap": {
    "branches": {
      "0": {
        "Ownable.transferOwnership": {
          "20": [
            2006,
            2028,
            true
          ]
        }
      },
      "1": {},
      "2": {
        "EMR.addUserHash": {
          "17": [
            1415,
            1441,
            true
          ]
        },
        "EMR.getUserHashData": {
          "19": [
            890,
            916,
            true
          ]
        },
        "EMR.getUserKey": {
          "18": [
            611,
            637,
            true
          ]
        }
      }
    },
    "statements": {
      "0": {
        "Ownable._transferOwnership": {
          "15": [
            2378,
            2395
          ],
          "16": [
            2405,
            2450
          ]
        },
        "Ownable.owner": {
          "0": [
            1101,
            1114
          ]
        },
        "Ownable.renounceOwnership": {
          "10": [
            1732,
            1762
          ]
        },
        "Ownable.transferOwnership": {
          "11": [
            1998,
            2071
          ],
          "12": [
            2081,
            2109
          ]
        }
      },
      "1": {
        "Context._msgSender": {
          "1": [
            712,
            729
          ]
        }
      },
      "2": {
        "EMR.addUserHash": {
          "2": [
            1407,
            1463
          ],
          "3": [
            1473,
            1511
          ]
        },
        "EMR.addUserKey": {
          "13": [
            1165,
            1207
          ],
          "14": [
            1217,
            1250
          ]
        },
        "EMR.getUserHashData": {
          "7": [
            882,
            938
          ],
          "8": [
            948,
            991
          ],
          "9": [
            1001,
            1034
          ]
        },
        "EMR.getUserKey": {
          "4": [
            603,
            659
          ],
          "5": [
            669,
            714
          ],
          "6": [
            724,
            759
          ]
        }
      }
    }
  },
  "dependencies": [
    "OpenZeppelin/openzeppelin-contracts@4.5.0/Context",
    "OpenZeppelin/openzeppelin-contracts@4.5.0/Ownable"
  ],
  "deployedBytecode": "608060405234801561001057600080fd5b506004361061007d5760003560e01c8063715018a61161005b578063715018a6146100d35780638da5cb5b146100db578063f2fde38b146100f6578063f7c89a4b1461010957600080fd5b80630654aa91146100825780632336b932146100975780635ce54fdb146100c0575b600080fd5b6100956100903660046106ce565b61011c565b005b6100aa6100a5366004610732565b6101cb565b6040516100b7919061079f565b60405180910390f35b6100aa6100ce366004610732565b610329565b6100956103d9565b6000546040516001600160a01b0390911681526020016100b7565b6100956101043660046107d2565b61040f565b6100956101173660046106ce565b6104aa565b6000546001600160a01b0316331461014f5760405162461bcd60e51b815260040161014690610802565b60405180910390fd5b60018260405161015f9190610837565b9081526040519081900360200190206002015460ff166101915760405162461bcd60e51b815260040161014690610853565b806001836040516101a29190610837565b908152602001604051809103902060010190805190602001906101c6929190610592565b505050565b6000546060906001600160a01b031633146101f85760405162461bcd60e51b815260040161014690610802565b6001826040516102089190610837565b9081526040519081900360200190206002015460ff1661023a5760405162461bcd60e51b815260040161014690610853565b816040516102489190610837565b6040519081900381209033907f0b8ef4c067762d50f1ea064ddb955a43e3ea90ef38028e9705d871e03460deeb90600090a360018260405161028a9190610837565b90815260405190819003602001902080546102a49061087e565b80601f01602080910402602001604051908101604052809291908181526020018280546102d09061087e565b801561031d5780601f106102f25761010080835404028352916020019161031d565b820191906000526020600020905b81548152906001019060200180831161030057829003601f168201915b50505050509050919050565b606060018260405161033b9190610837565b9081526040519081900360200190206002015460ff1661036d5760405162461bcd60e51b815260040161014690610853565b8160405161037b9190610837565b6040519081900381209033907f5159c5254a9dc3a6d84c7424b5e5032ba56a962dfee368eb1f8bff7d119e69b890600090a36001826040516103bd9190610837565b908152602001604051809103902060010180546102a49061087e565b6000546001600160a01b031633146104035760405162461bcd60e51b815260040161014690610802565b61040d6000610542565b565b6000546001600160a01b031633146104395760405162461bcd60e51b815260040161014690610802565b6001600160a01b03811661049e5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610146565b6104a781610542565b50565b6000546001600160a01b031633146104d45760405162461bcd60e51b815260040161014690610802565b806001836040516104e59190610837565b90815260200160405180910390206000019080519060200190610509929190610592565b506001808360405161051b9190610837565b908152604051908190036020019020600201805491151560ff199092169190911790555050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b82805461059e9061087e565b90600052602060002090601f0160209004810192826105c05760008555610606565b82601f106105d957805160ff1916838001178555610606565b82800160010185558215610606579182015b828111156106065782518255916020019190600101906105eb565b50610612929150610616565b5090565b5b808211156106125760008155600101610617565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261065257600080fd5b813567ffffffffffffffff8082111561066d5761066d61062b565b604051601f8301601f19908116603f011681019082821181831017156106955761069561062b565b816040528381528660208588010111156106ae57600080fd5b836020870160208301376000602085830101528094505050505092915050565b600080604083850312156106e157600080fd5b823567ffffffffffffffff808211156106f957600080fd5b61070586838701610641565b9350602085013591508082111561071b57600080fd5b5061072885828601610641565b9150509250929050565b60006020828403121561074457600080fd5b813567ffffffffffffffff81111561075b57600080fd5b61076784828501610641565b949350505050565b60005b8381101561078a578181015183820152602001610772565b83811115610799576000848401525b50505050565b60208152600082518060208401526107be81604085016020870161076f565b601f01601f19169190910160400192915050565b6000602082840312156107e457600080fd5b81356001600160a01b03811681146107fb57600080fd5b9392505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6000825161084981846020870161076f565b9190910192915050565b6020808252601190820152704e6f2050617469656e7420466f756e642160781b604082015260600190565b600181811c9082168061089257607f821691505b602082108114156108b357634e487b7160e01b600052602260045260246000fd5b5091905056fea2646970667358221220cf2baacaf109244780675244f1cc75fb454212b3b0d09be00b58272adb43758f64736f6c634300080b0033",
  "deployedSourceMap": "110:1410:2:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1263:255;;;;;;:::i;:::-;;:::i;:::-;;480:286;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;772:269;;;;;;:::i;:::-;;:::i;1668:101:0:-;;;:::i;1036:85::-;1082:7;1108:6;1036:85;;-1:-1:-1;;;;;1108:6:0;;;2542:51:3;;2530:2;2515:18;1036:85:0;2396:203:3;1918:198:0;;;;;;:::i;:::-;;:::i;1047:210:2:-;;;;;;:::i;:::-;;:::i;1263:255::-;1082:7:0;1108:6;-1:-1:-1;;;;;1108:6:0;719:10:1;1248:23:0;1240:68;;;;-1:-1:-1;;;1240:68:0;;;;;;;:::i;:::-;;;;;;;;;1415:7:2::1;1423:8;1415:17;;;;;;:::i;:::-;::::0;;;::::1;::::0;;;;;::::1;::::0;;;:26:::1;;::::0;::::1;;1407:56;;;;-1:-1:-1::0;;;1407:56:2::1;;;;;;;:::i;:::-;1502:9;1473:7;1481:8;1473:17;;;;;;:::i;:::-;;;;;;;;;;;;;:26;;:38;;;;;;;;;;;;:::i;:::-;;1263:255:::0;;:::o;480:286::-;1082:7:0;1108:6;574:13:2;;-1:-1:-1;;;;;1108:6:0;719:10:1;1248:23:0;1240:68;;;;-1:-1:-1;;;1240:68:0;;;;;;;:::i;:::-;611:7:2::1;619:8;611:17;;;;;;:::i;:::-;::::0;;;::::1;::::0;;;;;::::1;::::0;;;:26:::1;;::::0;::::1;;603:56;;;;-1:-1:-1::0;;;603:56:2::1;;;;;;;:::i;:::-;705:8;674:40;;;;;;:::i;:::-;;::::0;;;;::::1;::::0;;;693:10:::1;::::0;674:40:::1;::::0;;;::::1;731:7;739:8;731:17;;;;;;:::i;:::-;::::0;;;::::1;::::0;;;;;::::1;::::0;;;724:35;;::::1;::::0;::::1;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;480:286:::0;;;:::o;772:269::-;853:13;890:7;898:8;890:17;;;;;;:::i;:::-;;;;;;;;;;;;;;:26;;;;;882:56;;;;-1:-1:-1;;;882:56:2;;;;;;;:::i;:::-;982:8;953:38;;;;;;:::i;:::-;;;;;;;;;;970:10;;953:38;;;;;1008:7;1016:8;1008:17;;;;;;:::i;:::-;;;;;;;;;;;;;:26;;1001:33;;;;;:::i;1668:101:0:-;1082:7;1108:6;-1:-1:-1;;;;;1108:6:0;719:10:1;1248:23:0;1240:68;;;;-1:-1:-1;;;1240:68:0;;;;;;;:::i;:::-;1732:30:::1;1759:1;1732:18;:30::i;:::-;1668:101::o:0;1918:198::-;1082:7;1108:6;-1:-1:-1;;;;;1108:6:0;719:10:1;1248:23:0;1240:68;;;;-1:-1:-1;;;1240:68:0;;;;;;;:::i;:::-;-1:-1:-1;;;;;2006:22:0;::::1;1998:73;;;::::0;-1:-1:-1;;;1998:73:0;;4470:2:3;1998:73:0::1;::::0;::::1;4452:21:3::0;4509:2;4489:18;;;4482:30;4548:34;4528:18;;;4521:62;-1:-1:-1;;;4599:18:3;;;4592:36;4645:19;;1998:73:0::1;4268:402:3::0;1998:73:0::1;2081:28;2100:8;2081:18;:28::i;:::-;1918:198:::0;:::o;1047:210:2:-;1082:7:0;1108:6;-1:-1:-1;;;;;1108:6:0;719:10:1;1248:23:0;1240:68;;;;-1:-1:-1;;;1240:68:0;;;;;;;:::i;:::-;1196:11:2::1;1165:7;1173:8;1165:17;;;;;;:::i;:::-;;;;;;;;;;;;;:28;;:42;;;;;;;;;;;;:::i;:::-;;1246:4;1217:7:::0;1225:8:::1;1217:17;;;;;;:::i;:::-;::::0;;;::::1;::::0;;;;;::::1;::::0;;;:26:::1;;:33:::0;;;::::1;;-1:-1:-1::0;;1217:33:2;;::::1;::::0;;;::::1;::::0;;-1:-1:-1;;1047:210:2:o;2270:187:0:-;2343:16;2362:6;;-1:-1:-1;;;;;2378:17:0;;;-1:-1:-1;;;;;;2378:17:0;;;;;;2410:40;;2362:6;;;;;;;2410:40;;2343:16;2410:40;2333:124;2270:187;:::o;-1:-1:-1:-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;14:127:3;75:10;70:3;66:20;63:1;56:31;106:4;103:1;96:15;130:4;127:1;120:15;146:719;189:5;242:3;235:4;227:6;223:17;219:27;209:55;;260:1;257;250:12;209:55;296:6;283:20;322:18;359:2;355;352:10;349:36;;;365:18;;:::i;:::-;440:2;434:9;408:2;494:13;;-1:-1:-1;;490:22:3;;;514:2;486:31;482:40;470:53;;;538:18;;;558:22;;;535:46;532:72;;;584:18;;:::i;:::-;624:10;620:2;613:22;659:2;651:6;644:18;705:3;698:4;693:2;685:6;681:15;677:26;674:35;671:55;;;722:1;719;712:12;671:55;786:2;779:4;771:6;767:17;760:4;752:6;748:17;735:54;833:1;826:4;821:2;813:6;809:15;805:26;798:37;853:6;844:15;;;;;;146:719;;;;:::o;870:543::-;958:6;966;1019:2;1007:9;998:7;994:23;990:32;987:52;;;1035:1;1032;1025:12;987:52;1075:9;1062:23;1104:18;1145:2;1137:6;1134:14;1131:34;;;1161:1;1158;1151:12;1131:34;1184:50;1226:7;1217:6;1206:9;1202:22;1184:50;:::i;:::-;1174:60;;1287:2;1276:9;1272:18;1259:32;1243:48;;1316:2;1306:8;1303:16;1300:36;;;1332:1;1329;1322:12;1300:36;;1355:52;1399:7;1388:8;1377:9;1373:24;1355:52;:::i;:::-;1345:62;;;870:543;;;;;:::o;1418:322::-;1487:6;1540:2;1528:9;1519:7;1515:23;1511:32;1508:52;;;1556:1;1553;1546:12;1508:52;1596:9;1583:23;1629:18;1621:6;1618:30;1615:50;;;1661:1;1658;1651:12;1615:50;1684;1726:7;1717:6;1706:9;1702:22;1684:50;:::i;:::-;1674:60;1418:322;-1:-1:-1;;;;1418:322:3:o;1745:258::-;1817:1;1827:113;1841:6;1838:1;1835:13;1827:113;;;1917:11;;;1911:18;1898:11;;;1891:39;1863:2;1856:10;1827:113;;;1958:6;1955:1;1952:13;1949:48;;;1993:1;1984:6;1979:3;1975:16;1968:27;1949:48;;1745:258;;;:::o;2008:383::-;2157:2;2146:9;2139:21;2120:4;2189:6;2183:13;2232:6;2227:2;2216:9;2212:18;2205:34;2248:66;2307:6;2302:2;2291:9;2287:18;2282:2;2274:6;2270:15;2248:66;:::i;:::-;2375:2;2354:15;-1:-1:-1;;2350:29:3;2335:45;;;;2382:2;2331:54;;2008:383;-1:-1:-1;;2008:383:3:o;2604:286::-;2663:6;2716:2;2704:9;2695:7;2691:23;2687:32;2684:52;;;2732:1;2729;2722:12;2684:52;2758:23;;-1:-1:-1;;;;;2810:31:3;;2800:42;;2790:70;;2856:1;2853;2846:12;2790:70;2879:5;2604:286;-1:-1:-1;;;2604:286:3:o;2895:356::-;3097:2;3079:21;;;3116:18;;;3109:30;3175:34;3170:2;3155:18;;3148:62;3242:2;3227:18;;2895:356::o;3256:276::-;3387:3;3425:6;3419:13;3441:53;3487:6;3482:3;3475:4;3467:6;3463:17;3441:53;:::i;:::-;3510:16;;;;;3256:276;-1:-1:-1;;3256:276:3:o;3537:341::-;3739:2;3721:21;;;3778:2;3758:18;;;3751:30;-1:-1:-1;;;3812:2:3;3797:18;;3790:47;3869:2;3854:18;;3537:341::o;3883:380::-;3962:1;3958:12;;;;4005;;;4026:61;;4080:4;4072:6;4068:17;4058:27;;4026:61;4133:2;4125:6;4122:14;4102:18;4099:38;4096:161;;;4179:10;4174:3;4170:20;4167:1;4160:31;4214:4;4211:1;4204:15;4242:4;4239:1;4232:15;4096:161;;3883:380;;;:::o",
  "language": "Solidity",
  "natspec": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "offset": [
    110,
    1520
  ],
  "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x7D JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x715018A6 GT PUSH2 0x5B JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0xD3 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0xDB JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0xF6 JUMPI DUP1 PUSH4 0xF7C89A4B EQ PUSH2 0x109 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x654AA91 EQ PUSH2 0x82 JUMPI DUP1 PUSH4 0x2336B932 EQ PUSH2 0x97 JUMPI DUP1 PUSH4 0x5CE54FDB EQ PUSH2 0xC0 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x95 PUSH2 0x90 CALLDATASIZE PUSH1 0x4 PUSH2 0x6CE JUMP JUMPDEST PUSH2 0x11C JUMP JUMPDEST STOP JUMPDEST PUSH2 0xAA PUSH2 0xA5 CALLDATASIZE PUSH1 0x4 PUSH2 0x732 JUMP JUMPDEST PUSH2 0x1CB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xB7 SWAP2 SWAP1 PUSH2 0x79F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xAA PUSH2 0xCE CALLDATASIZE PUSH1 0x4 PUSH2 0x732 JUMP JUMPDEST PUSH2 0x329 JUMP JUMPDEST PUSH2 0x95 PUSH2 0x3D9 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xB7 JUMP JUMPDEST PUSH2 0x95 PUSH2 0x104 CALLDATASIZE PUSH1 0x4 PUSH2 0x7D2 JUMP JUMPDEST PUSH2 0x40F JUMP JUMPDEST PUSH2 0x95 PUSH2 0x117 CALLDATASIZE PUSH1 0x4 PUSH2 0x6CE JUMP JUMPDEST PUSH2 0x4AA JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x14F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x146 SWAP1 PUSH2 0x802 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 DUP3 PUSH1 0x40 MLOAD PUSH2 0x15F SWAP2 SWAP1 PUSH2 0x837 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 KECCAK256 PUSH1 0x2 ADD SLOAD PUSH1 0xFF AND PUSH2 0x191 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x146 SWAP1 PUSH2 0x853 JUMP JUMPDEST DUP1 PUSH1 0x1 DUP4 PUSH1 0x40 MLOAD PUSH2 0x1A2 SWAP2 SWAP1 PUSH2 0x837 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 PUSH1 0x1 ADD SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH2 0x1C6 SWAP3 SWAP2 SWAP1 PUSH2 0x592 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x60 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x1F8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x146 SWAP1 PUSH2 0x802 JUMP JUMPDEST PUSH1 0x1 DUP3 PUSH1 0x40 MLOAD PUSH2 0x208 SWAP2 SWAP1 PUSH2 0x837 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 KECCAK256 PUSH1 0x2 ADD SLOAD PUSH1 0xFF AND PUSH2 0x23A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x146 SWAP1 PUSH2 0x853 JUMP JUMPDEST DUP2 PUSH1 0x40 MLOAD PUSH2 0x248 SWAP2 SWAP1 PUSH2 0x837 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 SWAP1 SUB DUP2 KECCAK256 SWAP1 CALLER SWAP1 PUSH32 0xB8EF4C067762D50F1EA064DDB955A43E3EA90EF38028E9705D871E03460DEEB SWAP1 PUSH1 0x0 SWAP1 LOG3 PUSH1 0x1 DUP3 PUSH1 0x40 MLOAD PUSH2 0x28A SWAP2 SWAP1 PUSH2 0x837 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 KECCAK256 DUP1 SLOAD PUSH2 0x2A4 SWAP1 PUSH2 0x87E JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x2D0 SWAP1 PUSH2 0x87E JUMP JUMPDEST DUP1 ISZERO PUSH2 0x31D JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x2F2 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x31D JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x300 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x1 DUP3 PUSH1 0x40 MLOAD PUSH2 0x33B SWAP2 SWAP1 PUSH2 0x837 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 KECCAK256 PUSH1 0x2 ADD SLOAD PUSH1 0xFF AND PUSH2 0x36D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x146 SWAP1 PUSH2 0x853 JUMP JUMPDEST DUP2 PUSH1 0x40 MLOAD PUSH2 0x37B SWAP2 SWAP1 PUSH2 0x837 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 SWAP1 SUB DUP2 KECCAK256 SWAP1 CALLER SWAP1 PUSH32 0x5159C5254A9DC3A6D84C7424B5E5032BA56A962DFEE368EB1F8BFF7D119E69B8 SWAP1 PUSH1 0x0 SWAP1 LOG3 PUSH1 0x1 DUP3 PUSH1 0x40 MLOAD PUSH2 0x3BD SWAP2 SWAP1 PUSH2 0x837 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 PUSH1 0x1 ADD DUP1 SLOAD PUSH2 0x2A4 SWAP1 PUSH2 0x87E JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x403 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x146 SWAP1 PUSH2 0x802 JUMP JUMPDEST PUSH2 0x40D PUSH1 0x0 PUSH2 0x542 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x439 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x146 SWAP1 PUSH2 0x802 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x49E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x646472657373 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x146 JUMP JUMPDEST PUSH2 0x4A7 DUP2 PUSH2 0x542 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x4D4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x146 SWAP1 PUSH2 0x802 JUMP JUMPDEST DUP1 PUSH1 0x1 DUP4 PUSH1 0x40 MLOAD PUSH2 0x4E5 SWAP2 SWAP1 PUSH2 0x837 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 PUSH1 0x0 ADD SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH2 0x509 SWAP3 SWAP2 SWAP1 PUSH2 0x592 JUMP JUMPDEST POP PUSH1 0x1 DUP1 DUP4 PUSH1 0x40 MLOAD PUSH2 0x51B SWAP2 SWAP1 PUSH2 0x837 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 KECCAK256 PUSH1 0x2 ADD DUP1 SLOAD SWAP2 ISZERO ISZERO PUSH1 0xFF NOT SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR DUP5 SSTORE PUSH1 0x40 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP3 DUP4 SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 SWAP1 LOG3 POP POP JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH2 0x59E SWAP1 PUSH2 0x87E JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH2 0x5C0 JUMPI PUSH1 0x0 DUP6 SSTORE PUSH2 0x606 JUMP JUMPDEST DUP3 PUSH1 0x1F LT PUSH2 0x5D9 JUMPI DUP1 MLOAD PUSH1 0xFF NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH2 0x606 JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH2 0x606 JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0x606 JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH2 0x5EB JUMP JUMPDEST POP PUSH2 0x612 SWAP3 SWAP2 POP PUSH2 0x616 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0x612 JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x617 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x652 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x66D JUMPI PUSH2 0x66D PUSH2 0x62B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP4 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP3 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH2 0x695 JUMPI PUSH2 0x695 PUSH2 0x62B JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP4 DUP2 MSTORE DUP7 PUSH1 0x20 DUP6 DUP9 ADD ADD GT ISZERO PUSH2 0x6AE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 PUSH1 0x20 DUP8 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 PUSH1 0x20 DUP6 DUP4 ADD ADD MSTORE DUP1 SWAP5 POP POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x6E1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x6F9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x705 DUP7 DUP4 DUP8 ADD PUSH2 0x641 JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x71B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x728 DUP6 DUP3 DUP7 ADD PUSH2 0x641 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x744 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x75B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x767 DUP5 DUP3 DUP6 ADD PUSH2 0x641 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x78A JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x772 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x799 JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x7BE DUP2 PUSH1 0x40 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x76F JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x7E4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x7FB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 DUP2 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x849 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x76F JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x11 SWAP1 DUP3 ADD MSTORE PUSH17 0x4E6F2050617469656E7420466F756E6421 PUSH1 0x78 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x892 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH2 0x8B3 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xCF 0x2B 0xAA 0xCA CALL MULMOD 0x24 SELFBALANCE DUP1 PUSH8 0x5244F1CC75FB4542 SLT 0xB3 0xB0 0xD0 SWAP12 0xE0 SIGNEXTEND PC 0x27 0x2A 0xDB NUMBER PUSH22 0x8F64736F6C634300080B003300000000000000000000 ",
  "pcMap": {
    "0": {
      "offset": [
        110,
        1520
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x80"
    },
    "2": {
      "fn": null,
      "offset": [
        110,
        1520
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "4": {
      "fn": null,
      "offset": [
        110,
        1520
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "5": {
      "fn": null,
      "offset": [
        110,
        1520
      ],
      "op": "CALLVALUE",
      "path": "2"
    },
    "6": {
      "fn": null,
      "offset": [
        110,
        1520
      ],
      "op": "DUP1",
      "path": "2"
    },
    "7": {
      "fn": null,
      "offset": [
        110,
        1520
      ],
      "op": "ISZERO",
      "path": "2"
    },
    "8": {
      "fn": null,
      "offset": [
        110,
        1520
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x10"
    },
    "11": {
      "fn": null,
      "offset": [
        110,
        1520
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "12": {
      "fn": null,
      "offset": [
        110,
        1520
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "14": {
      "fn": null,
      "offset": [
        110,
        1520
      ],
      "op": "DUP1",
      "path": "2"
    },
    "15": {
      "dev": "Cannot send ether to nonpayable function",
      "fn": null,
      "offset": [
        110,
        1520
      ],
      "op": "REVERT",
      "path": "2"
    },
    "16": {
      "fn": null,
      "offset": [
        110,
        1520
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "17": {
      "fn": null,
      "offset": [
        110,
        1520
      ],
      "op": "POP",
      "path": "2"
    },
    "18": {
      "fn": null,
      "offset": [
        110,
        1520
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "20": {
      "fn": null,
      "offset": [
        110,
        1520
      ],
      "op": "CALLDATASIZE",
      "path": "2"
    },
    "21": {
      "fn": null,
      "offset": [
        110,
        1520
      ],
      "op": "LT",
      "path": "2"
    },
    "22": {
      "fn": null,
      "offset": [
        110,
        1520
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x7D"
    },
    "25": {
      "fn": null,
      "offset": [
        110,
        1520
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "26": {
      "fn": null,
      "offset": [
        110,
        1520
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "28": {
      "fn": null,
      "offset": [
        110,
        1520
      ],
      "op": "CALLDATALOAD",
      "path": "2"
    },
    "29": {
      "fn": null,
      "offset": [
        110,
        1520
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0xE0"
    },
    "31": {
      "fn": null,
      "offset": [
        110,
        1520
      ],
      "op": "SHR",
      "path": "2"
    },
    "32": {
      "fn": null,
      "offset": [
        110,
        1520
      ],
      "op": "DUP1",
      "path": "2"
    },
    "33": {
      "fn": null,
      "offset": [
        110,
        1520
      ],
      "op": "PUSH4",
      "path": "2",
      "value": "0x715018A6"
    },
    "38": {
      "fn": null,
      "offset": [
        110,
        1520
      ],
      "op": "GT",
      "path": "2"
    },
    "39": {
      "fn": null,
      "offset": [
        110,
        1520
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x5B"
    },
    "42": {
      "fn": null,
      "offset": [
        110,
        1520
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "43": {
      "fn": null,
      "offset": [
        110,
        1520
      ],
      "op": "DUP1",
      "path": "2"
    },
    "44": {
      "fn": null,
      "offset": [
        110,
        1520
      ],
      "op": "PUSH4",
      "path": "2",
      "value": "0x715018A6"
    },
    "49": {
      "fn": null,
      "offset": [
        110,
        1520
      ],
      "op": "EQ",
      "path": "2"
    },
    "50": {
      "fn": null,
      "offset": [
        110,
        1520
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xD3"
    },
    "53": {
      "fn": null,
      "offset": [
        110,
        1520
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "54": {
      "fn": null,
      "offset": [
        110,
        1520
      ],
      "op": "DUP1",
      "path": "2"
    },
    "55": {
      "fn": null,
      "offset": [
        110,
        1520
      ],
      "op": "PUSH4",
      "path": "2",
      "value": "0x8DA5CB5B"
    },
    "60": {
      "fn": null,
      "offset": [
        110,
        1520
      ],
      "op": "EQ",
      "path": "2"
    },
    "61": {
      "fn": null,
      "offset": [
        110,
        1520
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xDB"
    },
    "64": {
      "fn": null,
      "offset": [
        110,
        1520
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "65": {
      "fn": null,
      "offset": [
        110,
        1520
      ],
      "op": "DUP1",
      "path": "2"
    },
    "66": {
      "fn": null,
      "offset": [
        110,
        1520
      ],
      "op": "PUSH4",
      "path": "2",
      "value": "0xF2FDE38B"
    },
    "71": {
      "fn": null,
      "offset": [
        110,
        1520
      ],
      "op": "EQ",
      "path": "2"
    },
    "72": {
      "fn": null,
      "offset": [
        110,
        1520
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xF6"
    },
    "75": {
      "fn": null,
      "offset": [
        110,
        1520
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "76": {
      "fn": null,
      "offset": [
        110,
        1520
      ],
      "op": "DUP1",
      "path": "2"
    },
    "77": {
      "fn": null,
      "offset": [
        110,
        1520
      ],
      "op": "PUSH4",
      "path": "2",
      "value": "0xF7C89A4B"
    },
    "82": {
      "fn": null,
      "offset": [
        110,
        1520
      ],
      "op": "EQ",
      "path": "2"
    },
    "83": {
      "fn": null,
      "offset": [
        110,
        1520
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x109"
    },
    "86": {
      "fn": null,
      "offset": [
        110,
        1520
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "87": {
      "fn": null,
      "offset": [
        110,
        1520
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "89": {
      "fn": null,
      "offset": [
        110,
        1520
      ],
      "op": "DUP1",
      "path": "2"
    },
    "90": {
      "fn": null,
      "offset": [
        110,
        1520
      ],
      "op": "REVERT",
      "path": "2"
    },
    "91": {
      "fn": null,
      "offset": [
        110,
        1520
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "92": {
      "fn": null,
      "offset": [
        110,
        1520
      ],
      "op": "DUP1",
      "path": "2"
    },
    "93": {
      "fn": null,
      "offset": [
        110,
        1520
      ],
      "op": "PUSH4",
      "path": "2",
      "value": "0x654AA91"
    },
    "98": {
      "fn": null,
      "offset": [
        110,
        1520
      ],
      "op": "EQ",
      "path": "2"
    },
    "99": {
      "fn": null,
      "offset": [
        110,
        1520
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x82"
    },
    "102": {
      "fn": null,
      "offset": [
        110,
        1520
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "103": {
      "fn": null,
      "offset": [
        110,
        1520
      ],
      "op": "DUP1",
      "path": "2"
    },
    "104": {
      "fn": null,
      "offset": [
        110,
        1520
      ],
      "op": "PUSH4",
      "path": "2",
      "value": "0x2336B932"
    },
    "109": {
      "fn": null,
      "offset": [
        110,
        1520
      ],
      "op": "EQ",
      "path": "2"
    },
    "110": {
      "fn": null,
      "offset": [
        110,
        1520
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x97"
    },
    "113": {
      "fn": null,
      "offset": [
        110,
        1520
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "114": {
      "fn": null,
      "offset": [
        110,
        1520
      ],
      "op": "DUP1",
      "path": "2"
    },
    "115": {
      "fn": null,
      "offset": [
        110,
        1520
      ],
      "op": "PUSH4",
      "path": "2",
      "value": "0x5CE54FDB"
    },
    "120": {
      "fn": null,
      "offset": [
        110,
        1520
      ],
      "op": "EQ",
      "path": "2"
    },
    "121": {
      "fn": null,
      "offset": [
        110,
        1520
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xC0"
    },
    "124": {
      "fn": null,
      "offset": [
        110,
        1520
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "125": {
      "fn": null,
      "offset": [
        110,
        1520
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "126": {
      "fn": null,
      "offset": [
        110,
        1520
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "128": {
      "fn": null,
      "offset": [
        110,
        1520
      ],
      "op": "DUP1",
      "path": "2"
    },
    "129": {
      "first_revert": true,
      "fn": null,
      "offset": [
        110,
        1520
      ],
      "op": "REVERT",
      "path": "2"
    },
    "130": {
      "fn": "EMR.addUserHash",
      "offset": [
        1263,
        1518
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "131": {
      "fn": "EMR.addUserHash",
      "offset": [
        1263,
        1518
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x95"
    },
    "134": {
      "fn": "EMR.addUserHash",
      "offset": [
        1263,
        1518
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x90"
    },
    "137": {
      "fn": "EMR.addUserHash",
      "offset": [
        1263,
        1518
      ],
      "op": "CALLDATASIZE",
      "path": "2"
    },
    "138": {
      "fn": "EMR.addUserHash",
      "offset": [
        1263,
        1518
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "140": {
      "fn": "EMR.addUserHash",
      "offset": [
        1263,
        1518
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x6CE"
    },
    "143": {
      "fn": "EMR.addUserHash",
      "jump": "i",
      "offset": [
        1263,
        1518
      ],
      "op": "JUMP",
      "path": "2"
    },
    "144": {
      "fn": "EMR.addUserHash",
      "offset": [
        1263,
        1518
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "145": {
      "fn": "EMR.addUserHash",
      "offset": [
        1263,
        1518
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x11C"
    },
    "148": {
      "fn": "EMR.addUserHash",
      "jump": "i",
      "offset": [
        1263,
        1518
      ],
      "op": "JUMP",
      "path": "2"
    },
    "149": {
      "fn": "EMR.addUserHash",
      "offset": [
        1263,
        1518
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "150": {
      "fn": "EMR.addUserHash",
      "offset": [
        1263,
        1518
      ],
      "op": "STOP",
      "path": "2"
    },
    "151": {
      "fn": "EMR.getUserKey",
      "offset": [
        480,
        766
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "152": {
      "fn": "EMR.getUserKey",
      "offset": [
        480,
        766
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xAA"
    },
    "155": {
      "fn": "EMR.getUserKey",
      "offset": [
        480,
        766
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xA5"
    },
    "158": {
      "fn": "EMR.getUserKey",
      "offset": [
        480,
        766
      ],
      "op": "CALLDATASIZE",
      "path": "2"
    },
    "159": {
      "fn": "EMR.getUserKey",
      "offset": [
        480,
        766
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "161": {
      "fn": "EMR.getUserKey",
      "offset": [
        480,
        766
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x732"
    },
    "164": {
      "fn": "EMR.getUserKey",
      "jump": "i",
      "offset": [
        480,
        766
      ],
      "op": "JUMP",
      "path": "2"
    },
    "165": {
      "fn": "EMR.getUserKey",
      "offset": [
        480,
        766
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "166": {
      "fn": "EMR.getUserKey",
      "offset": [
        480,
        766
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x1CB"
    },
    "169": {
      "fn": "EMR.getUserKey",
      "jump": "i",
      "offset": [
        480,
        766
      ],
      "op": "JUMP",
      "path": "2"
    },
    "170": {
      "fn": "EMR.getUserKey",
      "offset": [
        480,
        766
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "171": {
      "fn": "EMR.getUserKey",
      "offset": [
        480,
        766
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "173": {
      "fn": "EMR.getUserKey",
      "offset": [
        480,
        766
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "174": {
      "fn": "EMR.getUserKey",
      "offset": [
        480,
        766
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xB7"
    },
    "177": {
      "fn": "EMR.getUserKey",
      "offset": [
        480,
        766
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "178": {
      "fn": "EMR.getUserKey",
      "offset": [
        480,
        766
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "179": {
      "fn": "EMR.getUserKey",
      "offset": [
        480,
        766
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x79F"
    },
    "182": {
      "fn": "EMR.getUserKey",
      "jump": "i",
      "offset": [
        480,
        766
      ],
      "op": "JUMP",
      "path": "2"
    },
    "183": {
      "fn": "EMR.getUserKey",
      "offset": [
        480,
        766
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "184": {
      "fn": "EMR.getUserKey",
      "offset": [
        480,
        766
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "186": {
      "fn": "EMR.getUserKey",
      "offset": [
        480,
        766
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "187": {
      "fn": "EMR.getUserKey",
      "offset": [
        480,
        766
      ],
      "op": "DUP1",
      "path": "2"
    },
    "188": {
      "fn": "EMR.getUserKey",
      "offset": [
        480,
        766
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "189": {
      "fn": "EMR.getUserKey",
      "offset": [
        480,
        766
      ],
      "op": "SUB",
      "path": "2"
    },
    "190": {
      "fn": "EMR.getUserKey",
      "offset": [
        480,
        766
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "191": {
      "fn": "EMR.getUserKey",
      "offset": [
        480,
        766
      ],
      "op": "RETURN",
      "path": "2"
    },
    "192": {
      "fn": "EMR.getUserHashData",
      "offset": [
        772,
        1041
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "193": {
      "fn": "EMR.getUserHashData",
      "offset": [
        772,
        1041
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xAA"
    },
    "196": {
      "fn": "EMR.getUserHashData",
      "offset": [
        772,
        1041
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xCE"
    },
    "199": {
      "fn": "EMR.getUserHashData",
      "offset": [
        772,
        1041
      ],
      "op": "CALLDATASIZE",
      "path": "2"
    },
    "200": {
      "fn": "EMR.getUserHashData",
      "offset": [
        772,
        1041
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "202": {
      "fn": "EMR.getUserHashData",
      "offset": [
        772,
        1041
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x732"
    },
    "205": {
      "fn": "EMR.getUserHashData",
      "jump": "i",
      "offset": [
        772,
        1041
      ],
      "op": "JUMP",
      "path": "2"
    },
    "206": {
      "fn": "EMR.getUserHashData",
      "offset": [
        772,
        1041
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "207": {
      "fn": "EMR.getUserHashData",
      "offset": [
        772,
        1041
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x329"
    },
    "210": {
      "fn": "EMR.getUserHashData",
      "jump": "i",
      "offset": [
        772,
        1041
      ],
      "op": "JUMP",
      "path": "2"
    },
    "211": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1668,
        1769
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "212": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1668,
        1769
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x95"
    },
    "215": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1668,
        1769
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x3D9"
    },
    "218": {
      "fn": "Ownable.renounceOwnership",
      "jump": "i",
      "offset": [
        1668,
        1769
      ],
      "op": "JUMP",
      "path": "0"
    },
    "219": {
      "fn": "Ownable.owner",
      "offset": [
        1036,
        1121
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "220": {
      "fn": "Ownable.owner",
      "offset": [
        1082,
        1089
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "222": {
      "fn": "Ownable.owner",
      "offset": [
        1108,
        1114
      ],
      "op": "SLOAD",
      "path": "0",
      "statement": 0
    },
    "223": {
      "fn": "Ownable.owner",
      "offset": [
        1036,
        1121
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "225": {
      "fn": "Ownable.owner",
      "offset": [
        1036,
        1121
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "226": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "228": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "230": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "232": {
      "op": "SHL"
    },
    "233": {
      "op": "SUB"
    },
    "234": {
      "fn": "Ownable.owner",
      "offset": [
        1108,
        1114
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "235": {
      "fn": "Ownable.owner",
      "offset": [
        1108,
        1114
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "236": {
      "fn": "Ownable.owner",
      "offset": [
        1108,
        1114
      ],
      "op": "AND",
      "path": "0"
    },
    "237": {
      "op": "DUP2"
    },
    "238": {
      "op": "MSTORE"
    },
    "239": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "241": {
      "op": "ADD"
    },
    "242": {
      "fn": "Ownable.owner",
      "offset": [
        1036,
        1121
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xB7"
    },
    "245": {
      "op": "JUMP"
    },
    "246": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        1918,
        2116
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "247": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        1918,
        2116
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x95"
    },
    "250": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        1918,
        2116
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x104"
    },
    "253": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        1918,
        2116
      ],
      "op": "CALLDATASIZE",
      "path": "0"
    },
    "254": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        1918,
        2116
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "256": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        1918,
        2116
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x7D2"
    },
    "259": {
      "fn": "Ownable.transferOwnership",
      "jump": "i",
      "offset": [
        1918,
        2116
      ],
      "op": "JUMP",
      "path": "0"
    },
    "260": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        1918,
        2116
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "261": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        1918,
        2116
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x40F"
    },
    "264": {
      "fn": "Ownable.transferOwnership",
      "jump": "i",
      "offset": [
        1918,
        2116
      ],
      "op": "JUMP",
      "path": "0"
    },
    "265": {
      "fn": "EMR.addUserKey",
      "offset": [
        1047,
        1257
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "266": {
      "fn": "EMR.addUserKey",
      "offset": [
        1047,
        1257
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x95"
    },
    "269": {
      "fn": "EMR.addUserKey",
      "offset": [
        1047,
        1257
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x117"
    },
    "272": {
      "fn": "EMR.addUserKey",
      "offset": [
        1047,
        1257
      ],
      "op": "CALLDATASIZE",
      "path": "2"
    },
    "273": {
      "fn": "EMR.addUserKey",
      "offset": [
        1047,
        1257
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "275": {
      "fn": "EMR.addUserKey",
      "offset": [
        1047,
        1257
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x6CE"
    },
    "278": {
      "fn": "EMR.addUserKey",
      "jump": "i",
      "offset": [
        1047,
        1257
      ],
      "op": "JUMP",
      "path": "2"
    },
    "279": {
      "fn": "EMR.addUserKey",
      "offset": [
        1047,
        1257
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "280": {
      "fn": "EMR.addUserKey",
      "offset": [
        1047,
        1257
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x4AA"
    },
    "283": {
      "fn": "EMR.addUserKey",
      "jump": "i",
      "offset": [
        1047,
        1257
      ],
      "op": "JUMP",
      "path": "2"
    },
    "284": {
      "fn": "EMR.addUserHash",
      "offset": [
        1263,
        1518
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "285": {
      "fn": "Ownable.owner",
      "offset": [
        1082,
        1089
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "287": {
      "fn": "Ownable.owner",
      "offset": [
        1108,
        1114
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "288": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "290": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "292": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "294": {
      "op": "SHL"
    },
    "295": {
      "op": "SUB"
    },
    "296": {
      "fn": "Ownable.owner",
      "offset": [
        1108,
        1114
      ],
      "op": "AND",
      "path": "0"
    },
    "297": {
      "fn": "Context._msgSender",
      "offset": [
        719,
        729
      ],
      "op": "CALLER",
      "path": "1",
      "statement": 1
    },
    "298": {
      "offset": [
        1248,
        1271
      ],
      "op": "EQ",
      "path": "0"
    },
    "299": {
      "offset": [
        1240,
        1308
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x14F"
    },
    "302": {
      "offset": [
        1240,
        1308
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "303": {
      "fn": "Context._msgSender",
      "offset": [
        1240,
        1308
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "305": {
      "fn": "Context._msgSender",
      "offset": [
        1240,
        1308
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "306": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "310": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "312": {
      "op": "SHL"
    },
    "313": {
      "offset": [
        1240,
        1308
      ],
      "op": "DUP2",
      "path": "0"
    },
    "314": {
      "fn": "Context._msgSender",
      "offset": [
        1240,
        1308
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "315": {
      "fn": "Context._msgSender",
      "offset": [
        1240,
        1308
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "317": {
      "fn": "Context._msgSender",
      "offset": [
        1240,
        1308
      ],
      "op": "ADD",
      "path": "0"
    },
    "318": {
      "fn": "Context._msgSender",
      "offset": [
        1240,
        1308
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x146"
    },
    "321": {
      "fn": "Context._msgSender",
      "offset": [
        1240,
        1308
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "322": {
      "fn": "Context._msgSender",
      "offset": [
        1240,
        1308
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x802"
    },
    "325": {
      "fn": "Context._msgSender",
      "jump": "i",
      "offset": [
        1240,
        1308
      ],
      "op": "JUMP",
      "path": "0"
    },
    "326": {
      "fn": "Context._msgSender",
      "offset": [
        1240,
        1308
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "327": {
      "fn": "Context._msgSender",
      "offset": [
        1240,
        1308
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "329": {
      "fn": "Context._msgSender",
      "offset": [
        1240,
        1308
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "330": {
      "fn": "Context._msgSender",
      "offset": [
        1240,
        1308
      ],
      "op": "DUP1",
      "path": "0"
    },
    "331": {
      "fn": "Context._msgSender",
      "offset": [
        1240,
        1308
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "332": {
      "fn": "Context._msgSender",
      "offset": [
        1240,
        1308
      ],
      "op": "SUB",
      "path": "0"
    },
    "333": {
      "fn": "Context._msgSender",
      "offset": [
        1240,
        1308
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "334": {
      "fn": "Context._msgSender",
      "offset": [
        1240,
        1308
      ],
      "op": "REVERT",
      "optimizer_revert": true,
      "path": "0"
    },
    "335": {
      "fn": "Context._msgSender",
      "offset": [
        1240,
        1308
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "336": {
      "fn": "EMR.addUserHash",
      "offset": [
        1415,
        1422
      ],
      "op": "PUSH1",
      "path": "2",
      "statement": 2,
      "value": "0x1"
    },
    "338": {
      "fn": "EMR.addUserHash",
      "offset": [
        1423,
        1431
      ],
      "op": "DUP3",
      "path": "2"
    },
    "339": {
      "fn": "EMR.addUserHash",
      "offset": [
        1415,
        1432
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "341": {
      "fn": "EMR.addUserHash",
      "offset": [
        1415,
        1432
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "342": {
      "fn": "EMR.addUserHash",
      "offset": [
        1415,
        1432
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x15F"
    },
    "345": {
      "fn": "EMR.addUserHash",
      "offset": [
        1415,
        1432
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "346": {
      "fn": "EMR.addUserHash",
      "offset": [
        1415,
        1432
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "347": {
      "fn": "EMR.addUserHash",
      "offset": [
        1415,
        1432
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x837"
    },
    "350": {
      "fn": "EMR.addUserHash",
      "jump": "i",
      "offset": [
        1415,
        1432
      ],
      "op": "JUMP",
      "path": "2"
    },
    "351": {
      "fn": "EMR.addUserHash",
      "offset": [
        1415,
        1432
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "352": {
      "fn": "EMR.addUserHash",
      "offset": [
        1415,
        1432
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "353": {
      "fn": "EMR.addUserHash",
      "offset": [
        1415,
        1432
      ],
      "op": "DUP2",
      "path": "2"
    },
    "354": {
      "fn": "EMR.addUserHash",
      "offset": [
        1415,
        1432
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "355": {
      "fn": "EMR.addUserHash",
      "offset": [
        1415,
        1432
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "357": {
      "fn": "EMR.addUserHash",
      "offset": [
        1415,
        1432
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "358": {
      "fn": "EMR.addUserHash",
      "offset": [
        1415,
        1432
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "359": {
      "fn": "EMR.addUserHash",
      "offset": [
        1415,
        1432
      ],
      "op": "DUP2",
      "path": "2"
    },
    "360": {
      "fn": "EMR.addUserHash",
      "offset": [
        1415,
        1432
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "361": {
      "fn": "EMR.addUserHash",
      "offset": [
        1415,
        1432
      ],
      "op": "SUB",
      "path": "2"
    },
    "362": {
      "fn": "EMR.addUserHash",
      "offset": [
        1415,
        1432
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "364": {
      "fn": "EMR.addUserHash",
      "offset": [
        1415,
        1432
      ],
      "op": "ADD",
      "path": "2"
    },
    "365": {
      "fn": "EMR.addUserHash",
      "offset": [
        1415,
        1432
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "366": {
      "fn": "EMR.addUserHash",
      "offset": [
        1415,
        1432
      ],
      "op": "KECCAK256",
      "path": "2"
    },
    "367": {
      "fn": "EMR.addUserHash",
      "offset": [
        1415,
        1441
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x2"
    },
    "369": {
      "fn": "EMR.addUserHash",
      "offset": [
        1415,
        1441
      ],
      "op": "ADD",
      "path": "2"
    },
    "370": {
      "fn": "EMR.addUserHash",
      "offset": [
        1415,
        1441
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "371": {
      "fn": "EMR.addUserHash",
      "offset": [
        1415,
        1441
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0xFF"
    },
    "373": {
      "branch": 17,
      "fn": "EMR.addUserHash",
      "offset": [
        1415,
        1441
      ],
      "op": "AND",
      "path": "2"
    },
    "374": {
      "fn": "EMR.addUserHash",
      "offset": [
        1407,
        1463
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x191"
    },
    "377": {
      "branch": 17,
      "fn": "EMR.addUserHash",
      "offset": [
        1407,
        1463
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "378": {
      "fn": "EMR.addUserHash",
      "offset": [
        1407,
        1463
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "380": {
      "fn": "EMR.addUserHash",
      "offset": [
        1407,
        1463
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "381": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "385": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "387": {
      "op": "SHL"
    },
    "388": {
      "fn": "EMR.addUserHash",
      "offset": [
        1407,
        1463
      ],
      "op": "DUP2",
      "path": "2"
    },
    "389": {
      "fn": "EMR.addUserHash",
      "offset": [
        1407,
        1463
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "390": {
      "fn": "EMR.addUserHash",
      "offset": [
        1407,
        1463
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "392": {
      "fn": "EMR.addUserHash",
      "offset": [
        1407,
        1463
      ],
      "op": "ADD",
      "path": "2"
    },
    "393": {
      "fn": "EMR.addUserHash",
      "offset": [
        1407,
        1463
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x146"
    },
    "396": {
      "fn": "EMR.addUserHash",
      "offset": [
        1407,
        1463
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "397": {
      "fn": "EMR.addUserHash",
      "offset": [
        1407,
        1463
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x853"
    },
    "400": {
      "fn": "EMR.addUserHash",
      "jump": "i",
      "offset": [
        1407,
        1463
      ],
      "op": "JUMP",
      "path": "2"
    },
    "401": {
      "fn": "EMR.addUserHash",
      "offset": [
        1407,
        1463
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "402": {
      "fn": "EMR.addUserHash",
      "offset": [
        1502,
        1511
      ],
      "op": "DUP1",
      "path": "2",
      "statement": 3
    },
    "403": {
      "fn": "EMR.addUserHash",
      "offset": [
        1473,
        1480
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x1"
    },
    "405": {
      "fn": "EMR.addUserHash",
      "offset": [
        1481,
        1489
      ],
      "op": "DUP4",
      "path": "2"
    },
    "406": {
      "fn": "EMR.addUserHash",
      "offset": [
        1473,
        1490
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "408": {
      "fn": "EMR.addUserHash",
      "offset": [
        1473,
        1490
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "409": {
      "fn": "EMR.addUserHash",
      "offset": [
        1473,
        1490
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x1A2"
    },
    "412": {
      "fn": "EMR.addUserHash",
      "offset": [
        1473,
        1490
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "413": {
      "fn": "EMR.addUserHash",
      "offset": [
        1473,
        1490
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "414": {
      "fn": "EMR.addUserHash",
      "offset": [
        1473,
        1490
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x837"
    },
    "417": {
      "fn": "EMR.addUserHash",
      "jump": "i",
      "offset": [
        1473,
        1490
      ],
      "op": "JUMP",
      "path": "2"
    },
    "418": {
      "fn": "EMR.addUserHash",
      "offset": [
        1473,
        1490
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "419": {
      "fn": "EMR.addUserHash",
      "offset": [
        1473,
        1490
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "420": {
      "fn": "EMR.addUserHash",
      "offset": [
        1473,
        1490
      ],
      "op": "DUP2",
      "path": "2"
    },
    "421": {
      "fn": "EMR.addUserHash",
      "offset": [
        1473,
        1490
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "422": {
      "fn": "EMR.addUserHash",
      "offset": [
        1473,
        1490
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "424": {
      "fn": "EMR.addUserHash",
      "offset": [
        1473,
        1490
      ],
      "op": "ADD",
      "path": "2"
    },
    "425": {
      "fn": "EMR.addUserHash",
      "offset": [
        1473,
        1490
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "427": {
      "fn": "EMR.addUserHash",
      "offset": [
        1473,
        1490
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "428": {
      "fn": "EMR.addUserHash",
      "offset": [
        1473,
        1490
      ],
      "op": "DUP1",
      "path": "2"
    },
    "429": {
      "fn": "EMR.addUserHash",
      "offset": [
        1473,
        1490
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "430": {
      "fn": "EMR.addUserHash",
      "offset": [
        1473,
        1490
      ],
      "op": "SUB",
      "path": "2"
    },
    "431": {
      "fn": "EMR.addUserHash",
      "offset": [
        1473,
        1490
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "432": {
      "fn": "EMR.addUserHash",
      "offset": [
        1473,
        1490
      ],
      "op": "KECCAK256",
      "path": "2"
    },
    "433": {
      "fn": "EMR.addUserHash",
      "offset": [
        1473,
        1499
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x1"
    },
    "435": {
      "fn": "EMR.addUserHash",
      "offset": [
        1473,
        1499
      ],
      "op": "ADD",
      "path": "2"
    },
    "436": {
      "fn": "EMR.addUserHash",
      "offset": [
        1473,
        1511
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "437": {
      "fn": "EMR.addUserHash",
      "offset": [
        1473,
        1511
      ],
      "op": "DUP1",
      "path": "2"
    },
    "438": {
      "fn": "EMR.addUserHash",
      "offset": [
        1473,
        1511
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "439": {
      "fn": "EMR.addUserHash",
      "offset": [
        1473,
        1511
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "440": {
      "fn": "EMR.addUserHash",
      "offset": [
        1473,
        1511
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "442": {
      "fn": "EMR.addUserHash",
      "offset": [
        1473,
        1511
      ],
      "op": "ADD",
      "path": "2"
    },
    "443": {
      "fn": "EMR.addUserHash",
      "offset": [
        1473,
        1511
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "444": {
      "fn": "EMR.addUserHash",
      "offset": [
        1473,
        1511
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x1C6"
    },
    "447": {
      "fn": "EMR.addUserHash",
      "offset": [
        1473,
        1511
      ],
      "op": "SWAP3",
      "path": "2"
    },
    "448": {
      "fn": "EMR.addUserHash",
      "offset": [
        1473,
        1511
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "449": {
      "fn": "EMR.addUserHash",
      "offset": [
        1473,
        1511
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "450": {
      "fn": "EMR.addUserHash",
      "offset": [
        1473,
        1511
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x592"
    },
    "453": {
      "fn": "EMR.addUserHash",
      "jump": "i",
      "offset": [
        1473,
        1511
      ],
      "op": "JUMP",
      "path": "2"
    },
    "454": {
      "fn": "EMR.addUserHash",
      "offset": [
        1473,
        1511
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "455": {
      "fn": "EMR.addUserHash",
      "offset": [
        1473,
        1511
      ],
      "op": "POP",
      "path": "2"
    },
    "456": {
      "fn": "EMR.addUserHash",
      "offset": [
        1263,
        1518
      ],
      "op": "POP",
      "path": "2"
    },
    "457": {
      "fn": "EMR.addUserHash",
      "offset": [
        1263,
        1518
      ],
      "op": "POP",
      "path": "2"
    },
    "458": {
      "fn": "EMR.addUserHash",
      "jump": "o",
      "offset": [
        1263,
        1518
      ],
      "op": "JUMP",
      "path": "2"
    },
    "459": {
      "fn": "EMR.getUserKey",
      "offset": [
        480,
        766
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "460": {
      "fn": "Ownable.owner",
      "offset": [
        1082,
        1089
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "462": {
      "fn": "Ownable.owner",
      "offset": [
        1108,
        1114
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "463": {
      "fn": "EMR.getUserKey",
      "offset": [
        574,
        587
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x60"
    },
    "465": {
      "fn": "EMR.getUserKey",
      "offset": [
        574,
        587
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "466": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "468": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "470": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "472": {
      "op": "SHL"
    },
    "473": {
      "op": "SUB"
    },
    "474": {
      "fn": "Ownable.owner",
      "offset": [
        1108,
        1114
      ],
      "op": "AND",
      "path": "0"
    },
    "475": {
      "fn": "Context._msgSender",
      "offset": [
        719,
        729
      ],
      "op": "CALLER",
      "path": "1"
    },
    "476": {
      "offset": [
        1248,
        1271
      ],
      "op": "EQ",
      "path": "0"
    },
    "477": {
      "offset": [
        1240,
        1308
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1F8"
    },
    "480": {
      "offset": [
        1240,
        1308
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "481": {
      "fn": "Context._msgSender",
      "offset": [
        1240,
        1308
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "483": {
      "fn": "Context._msgSender",
      "offset": [
        1240,
        1308
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "484": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "488": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "490": {
      "op": "SHL"
    },
    "491": {
      "offset": [
        1240,
        1308
      ],
      "op": "DUP2",
      "path": "0"
    },
    "492": {
      "fn": "Context._msgSender",
      "offset": [
        1240,
        1308
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "493": {
      "fn": "Context._msgSender",
      "offset": [
        1240,
        1308
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "495": {
      "fn": "Context._msgSender",
      "offset": [
        1240,
        1308
      ],
      "op": "ADD",
      "path": "0"
    },
    "496": {
      "fn": "Context._msgSender",
      "offset": [
        1240,
        1308
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x146"
    },
    "499": {
      "fn": "Context._msgSender",
      "offset": [
        1240,
        1308
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "500": {
      "fn": "Context._msgSender",
      "offset": [
        1240,
        1308
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x802"
    },
    "503": {
      "fn": "Context._msgSender",
      "jump": "i",
      "offset": [
        1240,
        1308
      ],
      "op": "JUMP",
      "path": "0"
    },
    "504": {
      "fn": "Context._msgSender",
      "offset": [
        1240,
        1308
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "505": {
      "fn": "EMR.getUserKey",
      "offset": [
        611,
        618
      ],
      "op": "PUSH1",
      "path": "2",
      "statement": 4,
      "value": "0x1"
    },
    "507": {
      "fn": "EMR.getUserKey",
      "offset": [
        619,
        627
      ],
      "op": "DUP3",
      "path": "2"
    },
    "508": {
      "fn": "EMR.getUserKey",
      "offset": [
        611,
        628
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "510": {
      "fn": "EMR.getUserKey",
      "offset": [
        611,
        628
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "511": {
      "fn": "EMR.getUserKey",
      "offset": [
        611,
        628
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x208"
    },
    "514": {
      "fn": "EMR.getUserKey",
      "offset": [
        611,
        628
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "515": {
      "fn": "EMR.getUserKey",
      "offset": [
        611,
        628
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "516": {
      "fn": "EMR.getUserKey",
      "offset": [
        611,
        628
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x837"
    },
    "519": {
      "fn": "EMR.getUserKey",
      "jump": "i",
      "offset": [
        611,
        628
      ],
      "op": "JUMP",
      "path": "2"
    },
    "520": {
      "fn": "EMR.getUserKey",
      "offset": [
        611,
        628
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "521": {
      "fn": "EMR.getUserKey",
      "offset": [
        611,
        628
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "522": {
      "fn": "EMR.getUserKey",
      "offset": [
        611,
        628
      ],
      "op": "DUP2",
      "path": "2"
    },
    "523": {
      "fn": "EMR.getUserKey",
      "offset": [
        611,
        628
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "524": {
      "fn": "EMR.getUserKey",
      "offset": [
        611,
        628
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "526": {
      "fn": "EMR.getUserKey",
      "offset": [
        611,
        628
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "527": {
      "fn": "EMR.getUserKey",
      "offset": [
        611,
        628
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "528": {
      "fn": "EMR.getUserKey",
      "offset": [
        611,
        628
      ],
      "op": "DUP2",
      "path": "2"
    },
    "529": {
      "fn": "EMR.getUserKey",
      "offset": [
        611,
        628
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "530": {
      "fn": "EMR.getUserKey",
      "offset": [
        611,
        628
      ],
      "op": "SUB",
      "path": "2"
    },
    "531": {
      "fn": "EMR.getUserKey",
      "offset": [
        611,
        628
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "533": {
      "fn": "EMR.getUserKey",
      "offset": [
        611,
        628
      ],
      "op": "ADD",
      "path": "2"
    },
    "534": {
      "fn": "EMR.getUserKey",
      "offset": [
        611,
        628
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "535": {
      "fn": "EMR.getUserKey",
      "offset": [
        611,
        628
      ],
      "op": "KECCAK256",
      "path": "2"
    },
    "536": {
      "fn": "EMR.getUserKey",
      "offset": [
        611,
        637
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x2"
    },
    "538": {
      "fn": "EMR.getUserKey",
      "offset": [
        611,
        637
      ],
      "op": "ADD",
      "path": "2"
    },
    "539": {
      "fn": "EMR.getUserKey",
      "offset": [
        611,
        637
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "540": {
      "fn": "EMR.getUserKey",
      "offset": [
        611,
        637
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0xFF"
    },
    "542": {
      "branch": 18,
      "fn": "EMR.getUserKey",
      "offset": [
        611,
        637
      ],
      "op": "AND",
      "path": "2"
    },
    "543": {
      "fn": "EMR.getUserKey",
      "offset": [
        603,
        659
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x23A"
    },
    "546": {
      "branch": 18,
      "fn": "EMR.getUserKey",
      "offset": [
        603,
        659
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "547": {
      "fn": "EMR.getUserKey",
      "offset": [
        603,
        659
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "549": {
      "fn": "EMR.getUserKey",
      "offset": [
        603,
        659
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "550": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "554": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "556": {
      "op": "SHL"
    },
    "557": {
      "fn": "EMR.getUserKey",
      "offset": [
        603,
        659
      ],
      "op": "DUP2",
      "path": "2"
    },
    "558": {
      "fn": "EMR.getUserKey",
      "offset": [
        603,
        659
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "559": {
      "fn": "EMR.getUserKey",
      "offset": [
        603,
        659
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "561": {
      "fn": "EMR.getUserKey",
      "offset": [
        603,
        659
      ],
      "op": "ADD",
      "path": "2"
    },
    "562": {
      "fn": "EMR.getUserKey",
      "offset": [
        603,
        659
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x146"
    },
    "565": {
      "fn": "EMR.getUserKey",
      "offset": [
        603,
        659
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "566": {
      "fn": "EMR.getUserKey",
      "offset": [
        603,
        659
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x853"
    },
    "569": {
      "fn": "EMR.getUserKey",
      "jump": "i",
      "offset": [
        603,
        659
      ],
      "op": "JUMP",
      "path": "2"
    },
    "570": {
      "fn": "EMR.getUserKey",
      "offset": [
        603,
        659
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "571": {
      "fn": "EMR.getUserKey",
      "offset": [
        705,
        713
      ],
      "op": "DUP2",
      "path": "2",
      "statement": 5
    },
    "572": {
      "fn": "EMR.getUserKey",
      "offset": [
        674,
        714
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "574": {
      "fn": "EMR.getUserKey",
      "offset": [
        674,
        714
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "575": {
      "fn": "EMR.getUserKey",
      "offset": [
        674,
        714
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x248"
    },
    "578": {
      "fn": "EMR.getUserKey",
      "offset": [
        674,
        714
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "579": {
      "fn": "EMR.getUserKey",
      "offset": [
        674,
        714
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "580": {
      "fn": "EMR.getUserKey",
      "offset": [
        674,
        714
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x837"
    },
    "583": {
      "fn": "EMR.getUserKey",
      "jump": "i",
      "offset": [
        674,
        714
      ],
      "op": "JUMP",
      "path": "2"
    },
    "584": {
      "fn": "EMR.getUserKey",
      "offset": [
        674,
        714
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "585": {
      "fn": "EMR.getUserKey",
      "offset": [
        674,
        714
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "587": {
      "fn": "EMR.getUserKey",
      "offset": [
        674,
        714
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "588": {
      "fn": "EMR.getUserKey",
      "offset": [
        674,
        714
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "589": {
      "fn": "EMR.getUserKey",
      "offset": [
        674,
        714
      ],
      "op": "DUP2",
      "path": "2"
    },
    "590": {
      "fn": "EMR.getUserKey",
      "offset": [
        674,
        714
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "591": {
      "fn": "EMR.getUserKey",
      "offset": [
        674,
        714
      ],
      "op": "SUB",
      "path": "2"
    },
    "592": {
      "fn": "EMR.getUserKey",
      "offset": [
        674,
        714
      ],
      "op": "DUP2",
      "path": "2"
    },
    "593": {
      "fn": "EMR.getUserKey",
      "offset": [
        674,
        714
      ],
      "op": "KECCAK256",
      "path": "2"
    },
    "594": {
      "fn": "EMR.getUserKey",
      "offset": [
        674,
        714
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "595": {
      "fn": "EMR.getUserKey",
      "offset": [
        693,
        703
      ],
      "op": "CALLER",
      "path": "2"
    },
    "596": {
      "fn": "EMR.getUserKey",
      "offset": [
        693,
        703
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "597": {
      "fn": "EMR.getUserKey",
      "offset": [
        674,
        714
      ],
      "op": "PUSH32",
      "path": "2",
      "value": "0xB8EF4C067762D50F1EA064DDB955A43E3EA90EF38028E9705D871E03460DEEB"
    },
    "630": {
      "fn": "EMR.getUserKey",
      "offset": [
        674,
        714
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "631": {
      "fn": "EMR.getUserKey",
      "offset": [
        674,
        714
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "633": {
      "fn": "EMR.getUserKey",
      "offset": [
        674,
        714
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "634": {
      "fn": "EMR.getUserKey",
      "offset": [
        674,
        714
      ],
      "op": "LOG3",
      "path": "2"
    },
    "635": {
      "fn": "EMR.getUserKey",
      "offset": [
        731,
        738
      ],
      "op": "PUSH1",
      "path": "2",
      "statement": 6,
      "value": "0x1"
    },
    "637": {
      "fn": "EMR.getUserKey",
      "offset": [
        739,
        747
      ],
      "op": "DUP3",
      "path": "2"
    },
    "638": {
      "fn": "EMR.getUserKey",
      "offset": [
        731,
        748
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "640": {
      "fn": "EMR.getUserKey",
      "offset": [
        731,
        748
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "641": {
      "fn": "EMR.getUserKey",
      "offset": [
        731,
        748
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x28A"
    },
    "644": {
      "fn": "EMR.getUserKey",
      "offset": [
        731,
        748
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "645": {
      "fn": "EMR.getUserKey",
      "offset": [
        731,
        748
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "646": {
      "fn": "EMR.getUserKey",
      "offset": [
        731,
        748
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x837"
    },
    "649": {
      "fn": "EMR.getUserKey",
      "jump": "i",
      "offset": [
        731,
        748
      ],
      "op": "JUMP",
      "path": "2"
    },
    "650": {
      "fn": "EMR.getUserKey",
      "offset": [
        731,
        748
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "651": {
      "fn": "EMR.getUserKey",
      "offset": [
        731,
        748
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "652": {
      "fn": "EMR.getUserKey",
      "offset": [
        731,
        748
      ],
      "op": "DUP2",
      "path": "2"
    },
    "653": {
      "fn": "EMR.getUserKey",
      "offset": [
        731,
        748
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "654": {
      "fn": "EMR.getUserKey",
      "offset": [
        731,
        748
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "656": {
      "fn": "EMR.getUserKey",
      "offset": [
        731,
        748
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "657": {
      "fn": "EMR.getUserKey",
      "offset": [
        731,
        748
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "658": {
      "fn": "EMR.getUserKey",
      "offset": [
        731,
        748
      ],
      "op": "DUP2",
      "path": "2"
    },
    "659": {
      "fn": "EMR.getUserKey",
      "offset": [
        731,
        748
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "660": {
      "fn": "EMR.getUserKey",
      "offset": [
        731,
        748
      ],
      "op": "SUB",
      "path": "2"
    },
    "661": {
      "fn": "EMR.getUserKey",
      "offset": [
        731,
        748
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "663": {
      "fn": "EMR.getUserKey",
      "offset": [
        731,
        748
      ],
      "op": "ADD",
      "path": "2"
    },
    "664": {
      "fn": "EMR.getUserKey",
      "offset": [
        731,
        748
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "665": {
      "fn": "EMR.getUserKey",
      "offset": [
        731,
        748
      ],
      "op": "KECCAK256",
      "path": "2"
    },
    "666": {
      "fn": "EMR.getUserKey",
      "offset": [
        724,
        759
      ],
      "op": "DUP1",
      "path": "2"
    },
    "667": {
      "fn": "EMR.getUserKey",
      "offset": [
        724,
        759
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "668": {
      "fn": "EMR.getUserKey",
      "offset": [
        724,
        759
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x2A4"
    },
    "671": {
      "fn": "EMR.getUserKey",
      "offset": [
        724,
        759
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "672": {
      "fn": "EMR.getUserKey",
      "offset": [
        724,
        759
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x87E"
    },
    "675": {
      "fn": "EMR.getUserKey",
      "jump": "i",
      "offset": [
        724,
        759
      ],
      "op": "JUMP",
      "path": "2"
    },
    "676": {
      "fn": "EMR.getUserKey",
      "offset": [
        724,
        759
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "677": {
      "fn": "EMR.getUserKey",
      "offset": [
        724,
        759
      ],
      "op": "DUP1",
      "path": "2"
    },
    "678": {
      "fn": "EMR.getUserKey",
      "offset": [
        724,
        759
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x1F"
    },
    "680": {
      "fn": "EMR.getUserKey",
      "offset": [
        724,
        759
      ],
      "op": "ADD",
      "path": "2"
    },
    "681": {
      "fn": "EMR.getUserKey",
      "offset": [
        724,
        759
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "683": {
      "fn": "EMR.getUserKey",
      "offset": [
        724,
        759
      ],
      "op": "DUP1",
      "path": "2"
    },
    "684": {
      "fn": "EMR.getUserKey",
      "offset": [
        724,
        759
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "685": {
      "fn": "EMR.getUserKey",
      "offset": [
        724,
        759
      ],
      "op": "DIV",
      "path": "2"
    },
    "686": {
      "fn": "EMR.getUserKey",
      "offset": [
        724,
        759
      ],
      "op": "MUL",
      "path": "2"
    },
    "687": {
      "fn": "EMR.getUserKey",
      "offset": [
        724,
        759
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "689": {
      "fn": "EMR.getUserKey",
      "offset": [
        724,
        759
      ],
      "op": "ADD",
      "path": "2"
    },
    "690": {
      "fn": "EMR.getUserKey",
      "offset": [
        724,
        759
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "692": {
      "fn": "EMR.getUserKey",
      "offset": [
        724,
        759
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "693": {
      "fn": "EMR.getUserKey",
      "offset": [
        724,
        759
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "694": {
      "fn": "EMR.getUserKey",
      "offset": [
        724,
        759
      ],
      "op": "DUP2",
      "path": "2"
    },
    "695": {
      "fn": "EMR.getUserKey",
      "offset": [
        724,
        759
      ],
      "op": "ADD",
      "path": "2"
    },
    "696": {
      "fn": "EMR.getUserKey",
      "offset": [
        724,
        759
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "698": {
      "fn": "EMR.getUserKey",
      "offset": [
        724,
        759
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "699": {
      "fn": "EMR.getUserKey",
      "offset": [
        724,
        759
      ],
      "op": "DUP1",
      "path": "2"
    },
    "700": {
      "fn": "EMR.getUserKey",
      "offset": [
        724,
        759
      ],
      "op": "SWAP3",
      "path": "2"
    },
    "701": {
      "fn": "EMR.getUserKey",
      "offset": [
        724,
        759
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "702": {
      "fn": "EMR.getUserKey",
      "offset": [
        724,
        759
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "703": {
      "fn": "EMR.getUserKey",
      "offset": [
        724,
        759
      ],
      "op": "DUP2",
      "path": "2"
    },
    "704": {
      "fn": "EMR.getUserKey",
      "offset": [
        724,
        759
      ],
      "op": "DUP2",
      "path": "2"
    },
    "705": {
      "fn": "EMR.getUserKey",
      "offset": [
        724,
        759
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "706": {
      "fn": "EMR.getUserKey",
      "offset": [
        724,
        759
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "708": {
      "fn": "EMR.getUserKey",
      "offset": [
        724,
        759
      ],
      "op": "ADD",
      "path": "2"
    },
    "709": {
      "fn": "EMR.getUserKey",
      "offset": [
        724,
        759
      ],
      "op": "DUP3",
      "path": "2"
    },
    "710": {
      "fn": "EMR.getUserKey",
      "offset": [
        724,
        759
      ],
      "op": "DUP1",
      "path": "2"
    },
    "711": {
      "fn": "EMR.getUserKey",
      "offset": [
        724,
        759
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "712": {
      "fn": "EMR.getUserKey",
      "offset": [
        724,
        759
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x2D0"
    },
    "715": {
      "fn": "EMR.getUserKey",
      "offset": [
        724,
        759
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "716": {
      "fn": "EMR.getUserKey",
      "offset": [
        724,
        759
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x87E"
    },
    "719": {
      "fn": "EMR.getUserKey",
      "jump": "i",
      "offset": [
        724,
        759
      ],
      "op": "JUMP",
      "path": "2"
    },
    "720": {
      "fn": "EMR.getUserKey",
      "offset": [
        724,
        759
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "721": {
      "fn": "EMR.getUserKey",
      "offset": [
        724,
        759
      ],
      "op": "DUP1",
      "path": "2"
    },
    "722": {
      "fn": "EMR.getUserKey",
      "offset": [
        724,
        759
      ],
      "op": "ISZERO",
      "path": "2"
    },
    "723": {
      "fn": "EMR.getUserKey",
      "offset": [
        724,
        759
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x31D"
    },
    "726": {
      "fn": "EMR.getUserKey",
      "offset": [
        724,
        759
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "727": {
      "fn": "EMR.getUserKey",
      "offset": [
        724,
        759
      ],
      "op": "DUP1",
      "path": "2"
    },
    "728": {
      "fn": "EMR.getUserKey",
      "offset": [
        724,
        759
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x1F"
    },
    "730": {
      "fn": "EMR.getUserKey",
      "offset": [
        724,
        759
      ],
      "op": "LT",
      "path": "2"
    },
    "731": {
      "fn": "EMR.getUserKey",
      "offset": [
        724,
        759
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x2F2"
    },
    "734": {
      "fn": "EMR.getUserKey",
      "offset": [
        724,
        759
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "735": {
      "fn": "EMR.getUserKey",
      "offset": [
        724,
        759
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x100"
    },
    "738": {
      "fn": "EMR.getUserKey",
      "offset": [
        724,
        759
      ],
      "op": "DUP1",
      "path": "2"
    },
    "739": {
      "fn": "EMR.getUserKey",
      "offset": [
        724,
        759
      ],
      "op": "DUP4",
      "path": "2"
    },
    "740": {
      "fn": "EMR.getUserKey",
      "offset": [
        724,
        759
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "741": {
      "fn": "EMR.getUserKey",
      "offset": [
        724,
        759
      ],
      "op": "DIV",
      "path": "2"
    },
    "742": {
      "fn": "EMR.getUserKey",
      "offset": [
        724,
        759
      ],
      "op": "MUL",
      "path": "2"
    },
    "743": {
      "fn": "EMR.getUserKey",
      "offset": [
        724,
        759
      ],
      "op": "DUP4",
      "path": "2"
    },
    "744": {
      "fn": "EMR.getUserKey",
      "offset": [
        724,
        759
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "745": {
      "fn": "EMR.getUserKey",
      "offset": [
        724,
        759
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "746": {
      "fn": "EMR.getUserKey",
      "offset": [
        724,
        759
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "748": {
      "fn": "EMR.getUserKey",
      "offset": [
        724,
        759
      ],
      "op": "ADD",
      "path": "2"
    },
    "749": {
      "fn": "EMR.getUserKey",
      "offset": [
        724,
        759
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "750": {
      "fn": "EMR.getUserKey",
      "offset": [
        724,
        759
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x31D"
    },
    "753": {
      "fn": "EMR.getUserKey",
      "offset": [
        724,
        759
      ],
      "op": "JUMP",
      "path": "2"
    },
    "754": {
      "fn": "EMR.getUserKey",
      "offset": [
        724,
        759
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "755": {
      "fn": "EMR.getUserKey",
      "offset": [
        724,
        759
      ],
      "op": "DUP3",
      "path": "2"
    },
    "756": {
      "fn": "EMR.getUserKey",
      "offset": [
        724,
        759
      ],
      "op": "ADD",
      "path": "2"
    },
    "757": {
      "fn": "EMR.getUserKey",
      "offset": [
        724,
        759
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "758": {
      "fn": "EMR.getUserKey",
      "offset": [
        724,
        759
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "759": {
      "fn": "EMR.getUserKey",
      "offset": [
        724,
        759
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "761": {
      "fn": "EMR.getUserKey",
      "offset": [
        724,
        759
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "762": {
      "fn": "EMR.getUserKey",
      "offset": [
        724,
        759
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "764": {
      "fn": "EMR.getUserKey",
      "offset": [
        724,
        759
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "766": {
      "fn": "EMR.getUserKey",
      "offset": [
        724,
        759
      ],
      "op": "KECCAK256",
      "path": "2"
    },
    "767": {
      "fn": "EMR.getUserKey",
      "offset": [
        724,
        759
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "768": {
      "fn": "EMR.getUserKey",
      "offset": [
        724,
        759
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "769": {
      "fn": "EMR.getUserKey",
      "offset": [
        724,
        759
      ],
      "op": "DUP2",
      "path": "2"
    },
    "770": {
      "fn": "EMR.getUserKey",
      "offset": [
        724,
        759
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "771": {
      "fn": "EMR.getUserKey",
      "offset": [
        724,
        759
      ],
      "op": "DUP2",
      "path": "2"
    },
    "772": {
      "fn": "EMR.getUserKey",
      "offset": [
        724,
        759
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "773": {
      "fn": "EMR.getUserKey",
      "offset": [
        724,
        759
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "774": {
      "fn": "EMR.getUserKey",
      "offset": [
        724,
        759
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x1"
    },
    "776": {
      "fn": "EMR.getUserKey",
      "offset": [
        724,
        759
      ],
      "op": "ADD",
      "path": "2"
    },
    "777": {
      "fn": "EMR.getUserKey",
      "offset": [
        724,
        759
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "778": {
      "fn": "EMR.getUserKey",
      "offset": [
        724,
        759
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "780": {
      "fn": "EMR.getUserKey",
      "offset": [
        724,
        759
      ],
      "op": "ADD",
      "path": "2"
    },
    "781": {
      "fn": "EMR.getUserKey",
      "offset": [
        724,
        759
      ],
      "op": "DUP1",
      "path": "2"
    },
    "782": {
      "fn": "EMR.getUserKey",
      "offset": [
        724,
        759
      ],
      "op": "DUP4",
      "path": "2"
    },
    "783": {
      "fn": "EMR.getUserKey",
      "offset": [
        724,
        759
      ],
      "op": "GT",
      "path": "2"
    },
    "784": {
      "fn": "EMR.getUserKey",
      "offset": [
        724,
        759
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x300"
    },
    "787": {
      "fn": "EMR.getUserKey",
      "offset": [
        724,
        759
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "788": {
      "fn": "EMR.getUserKey",
      "offset": [
        724,
        759
      ],
      "op": "DUP3",
      "path": "2"
    },
    "789": {
      "fn": "EMR.getUserKey",
      "offset": [
        724,
        759
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "790": {
      "fn": "EMR.getUserKey",
      "offset": [
        724,
        759
      ],
      "op": "SUB",
      "path": "2"
    },
    "791": {
      "fn": "EMR.getUserKey",
      "offset": [
        724,
        759
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x1F"
    },
    "793": {
      "fn": "EMR.getUserKey",
      "offset": [
        724,
        759
      ],
      "op": "AND",
      "path": "2"
    },
    "794": {
      "fn": "EMR.getUserKey",
      "offset": [
        724,
        759
      ],
      "op": "DUP3",
      "path": "2"
    },
    "795": {
      "fn": "EMR.getUserKey",
      "offset": [
        724,
        759
      ],
      "op": "ADD",
      "path": "2"
    },
    "796": {
      "fn": "EMR.getUserKey",
      "offset": [
        724,
        759
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "797": {
      "fn": "EMR.getUserKey",
      "offset": [
        724,
        759
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "798": {
      "fn": "EMR.getUserKey",
      "offset": [
        724,
        759
      ],
      "op": "POP",
      "path": "2"
    },
    "799": {
      "fn": "EMR.getUserKey",
      "offset": [
        724,
        759
      ],
      "op": "POP",
      "path": "2"
    },
    "800": {
      "fn": "EMR.getUserKey",
      "offset": [
        724,
        759
      ],
      "op": "POP",
      "path": "2"
    },
    "801": {
      "fn": "EMR.getUserKey",
      "offset": [
        724,
        759
      ],
      "op": "POP",
      "path": "2"
    },
    "802": {
      "fn": "EMR.getUserKey",
      "offset": [
        724,
        759
      ],
      "op": "POP",
      "path": "2"
    },
    "803": {
      "fn": "EMR.getUserKey",
      "offset": [
        724,
        759
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "804": {
      "fn": "EMR.getUserKey",
      "offset": [
        724,
        759
      ],
      "op": "POP",
      "path": "2"
    },
    "805": {
      "fn": "EMR.getUserKey",
      "offset": [
        480,
        766
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "806": {
      "fn": "EMR.getUserKey",
      "offset": [
        480,
        766
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "807": {
      "fn": "EMR.getUserKey",
      "offset": [
        480,
        766
      ],
      "op": "POP",
      "path": "2"
    },
    "808": {
      "fn": "EMR.getUserKey",
      "jump": "o",
      "offset": [
        480,
        766
      ],
      "op": "JUMP",
      "path": "2"
    },
    "809": {
      "fn": "EMR.getUserHashData",
      "offset": [
        772,
        1041
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "810": {
      "fn": "EMR.getUserHashData",
      "offset": [
        853,
        866
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x60"
    },
    "812": {
      "fn": "EMR.getUserHashData",
      "offset": [
        890,
        897
      ],
      "op": "PUSH1",
      "path": "2",
      "statement": 7,
      "value": "0x1"
    },
    "814": {
      "fn": "EMR.getUserHashData",
      "offset": [
        898,
        906
      ],
      "op": "DUP3",
      "path": "2"
    },
    "815": {
      "fn": "EMR.getUserHashData",
      "offset": [
        890,
        907
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "817": {
      "fn": "EMR.getUserHashData",
      "offset": [
        890,
        907
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "818": {
      "fn": "EMR.getUserHashData",
      "offset": [
        890,
        907
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x33B"
    },
    "821": {
      "fn": "EMR.getUserHashData",
      "offset": [
        890,
        907
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "822": {
      "fn": "EMR.getUserHashData",
      "offset": [
        890,
        907
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "823": {
      "fn": "EMR.getUserHashData",
      "offset": [
        890,
        907
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x837"
    },
    "826": {
      "fn": "EMR.getUserHashData",
      "jump": "i",
      "offset": [
        890,
        907
      ],
      "op": "JUMP",
      "path": "2"
    },
    "827": {
      "fn": "EMR.getUserHashData",
      "offset": [
        890,
        907
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "828": {
      "fn": "EMR.getUserHashData",
      "offset": [
        890,
        907
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "829": {
      "fn": "EMR.getUserHashData",
      "offset": [
        890,
        907
      ],
      "op": "DUP2",
      "path": "2"
    },
    "830": {
      "fn": "EMR.getUserHashData",
      "offset": [
        890,
        907
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "831": {
      "fn": "EMR.getUserHashData",
      "offset": [
        890,
        907
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "833": {
      "fn": "EMR.getUserHashData",
      "offset": [
        890,
        907
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "834": {
      "fn": "EMR.getUserHashData",
      "offset": [
        890,
        907
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "835": {
      "fn": "EMR.getUserHashData",
      "offset": [
        890,
        907
      ],
      "op": "DUP2",
      "path": "2"
    },
    "836": {
      "fn": "EMR.getUserHashData",
      "offset": [
        890,
        907
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "837": {
      "fn": "EMR.getUserHashData",
      "offset": [
        890,
        907
      ],
      "op": "SUB",
      "path": "2"
    },
    "838": {
      "fn": "EMR.getUserHashData",
      "offset": [
        890,
        907
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "840": {
      "fn": "EMR.getUserHashData",
      "offset": [
        890,
        907
      ],
      "op": "ADD",
      "path": "2"
    },
    "841": {
      "fn": "EMR.getUserHashData",
      "offset": [
        890,
        907
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "842": {
      "fn": "EMR.getUserHashData",
      "offset": [
        890,
        907
      ],
      "op": "KECCAK256",
      "path": "2"
    },
    "843": {
      "fn": "EMR.getUserHashData",
      "offset": [
        890,
        916
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x2"
    },
    "845": {
      "fn": "EMR.getUserHashData",
      "offset": [
        890,
        916
      ],
      "op": "ADD",
      "path": "2"
    },
    "846": {
      "fn": "EMR.getUserHashData",
      "offset": [
        890,
        916
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "847": {
      "fn": "EMR.getUserHashData",
      "offset": [
        890,
        916
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0xFF"
    },
    "849": {
      "branch": 19,
      "fn": "EMR.getUserHashData",
      "offset": [
        890,
        916
      ],
      "op": "AND",
      "path": "2"
    },
    "850": {
      "fn": "EMR.getUserHashData",
      "offset": [
        882,
        938
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x36D"
    },
    "853": {
      "branch": 19,
      "fn": "EMR.getUserHashData",
      "offset": [
        882,
        938
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "854": {
      "fn": "EMR.getUserHashData",
      "offset": [
        882,
        938
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "856": {
      "fn": "EMR.getUserHashData",
      "offset": [
        882,
        938
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "857": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "861": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "863": {
      "op": "SHL"
    },
    "864": {
      "fn": "EMR.getUserHashData",
      "offset": [
        882,
        938
      ],
      "op": "DUP2",
      "path": "2"
    },
    "865": {
      "fn": "EMR.getUserHashData",
      "offset": [
        882,
        938
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "866": {
      "fn": "EMR.getUserHashData",
      "offset": [
        882,
        938
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "868": {
      "fn": "EMR.getUserHashData",
      "offset": [
        882,
        938
      ],
      "op": "ADD",
      "path": "2"
    },
    "869": {
      "fn": "EMR.getUserHashData",
      "offset": [
        882,
        938
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x146"
    },
    "872": {
      "fn": "EMR.getUserHashData",
      "offset": [
        882,
        938
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "873": {
      "fn": "EMR.getUserHashData",
      "offset": [
        882,
        938
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x853"
    },
    "876": {
      "fn": "EMR.getUserHashData",
      "jump": "i",
      "offset": [
        882,
        938
      ],
      "op": "JUMP",
      "path": "2"
    },
    "877": {
      "fn": "EMR.getUserHashData",
      "offset": [
        882,
        938
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "878": {
      "fn": "EMR.getUserHashData",
      "offset": [
        982,
        990
      ],
      "op": "DUP2",
      "path": "2",
      "statement": 8
    },
    "879": {
      "fn": "EMR.getUserHashData",
      "offset": [
        953,
        991
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "881": {
      "fn": "EMR.getUserHashData",
      "offset": [
        953,
        991
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "882": {
      "fn": "EMR.getUserHashData",
      "offset": [
        953,
        991
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x37B"
    },
    "885": {
      "fn": "EMR.getUserHashData",
      "offset": [
        953,
        991
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "886": {
      "fn": "EMR.getUserHashData",
      "offset": [
        953,
        991
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "887": {
      "fn": "EMR.getUserHashData",
      "offset": [
        953,
        991
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x837"
    },
    "890": {
      "fn": "EMR.getUserHashData",
      "jump": "i",
      "offset": [
        953,
        991
      ],
      "op": "JUMP",
      "path": "2"
    },
    "891": {
      "fn": "EMR.getUserHashData",
      "offset": [
        953,
        991
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "892": {
      "fn": "EMR.getUserHashData",
      "offset": [
        953,
        991
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "894": {
      "fn": "EMR.getUserHashData",
      "offset": [
        953,
        991
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "895": {
      "fn": "EMR.getUserHashData",
      "offset": [
        953,
        991
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "896": {
      "fn": "EMR.getUserHashData",
      "offset": [
        953,
        991
      ],
      "op": "DUP2",
      "path": "2"
    },
    "897": {
      "fn": "EMR.getUserHashData",
      "offset": [
        953,
        991
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "898": {
      "fn": "EMR.getUserHashData",
      "offset": [
        953,
        991
      ],
      "op": "SUB",
      "path": "2"
    },
    "899": {
      "fn": "EMR.getUserHashData",
      "offset": [
        953,
        991
      ],
      "op": "DUP2",
      "path": "2"
    },
    "900": {
      "fn": "EMR.getUserHashData",
      "offset": [
        953,
        991
      ],
      "op": "KECCAK256",
      "path": "2"
    },
    "901": {
      "fn": "EMR.getUserHashData",
      "offset": [
        953,
        991
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "902": {
      "fn": "EMR.getUserHashData",
      "offset": [
        970,
        980
      ],
      "op": "CALLER",
      "path": "2"
    },
    "903": {
      "fn": "EMR.getUserHashData",
      "offset": [
        970,
        980
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "904": {
      "fn": "EMR.getUserHashData",
      "offset": [
        953,
        991
      ],
      "op": "PUSH32",
      "path": "2",
      "value": "0x5159C5254A9DC3A6D84C7424B5E5032BA56A962DFEE368EB1F8BFF7D119E69B8"
    },
    "937": {
      "fn": "EMR.getUserHashData",
      "offset": [
        953,
        991
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "938": {
      "fn": "EMR.getUserHashData",
      "offset": [
        953,
        991
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "940": {
      "fn": "EMR.getUserHashData",
      "offset": [
        953,
        991
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "941": {
      "fn": "EMR.getUserHashData",
      "offset": [
        953,
        991
      ],
      "op": "LOG3",
      "path": "2"
    },
    "942": {
      "fn": "EMR.getUserHashData",
      "offset": [
        1008,
        1015
      ],
      "op": "PUSH1",
      "path": "2",
      "statement": 9,
      "value": "0x1"
    },
    "944": {
      "fn": "EMR.getUserHashData",
      "offset": [
        1016,
        1024
      ],
      "op": "DUP3",
      "path": "2"
    },
    "945": {
      "fn": "EMR.getUserHashData",
      "offset": [
        1008,
        1025
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "947": {
      "fn": "EMR.getUserHashData",
      "offset": [
        1008,
        1025
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "948": {
      "fn": "EMR.getUserHashData",
      "offset": [
        1008,
        1025
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x3BD"
    },
    "951": {
      "fn": "EMR.getUserHashData",
      "offset": [
        1008,
        1025
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "952": {
      "fn": "EMR.getUserHashData",
      "offset": [
        1008,
        1025
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "953": {
      "fn": "EMR.getUserHashData",
      "offset": [
        1008,
        1025
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x837"
    },
    "956": {
      "fn": "EMR.getUserHashData",
      "jump": "i",
      "offset": [
        1008,
        1025
      ],
      "op": "JUMP",
      "path": "2"
    },
    "957": {
      "fn": "EMR.getUserHashData",
      "offset": [
        1008,
        1025
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "958": {
      "fn": "EMR.getUserHashData",
      "offset": [
        1008,
        1025
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "959": {
      "fn": "EMR.getUserHashData",
      "offset": [
        1008,
        1025
      ],
      "op": "DUP2",
      "path": "2"
    },
    "960": {
      "fn": "EMR.getUserHashData",
      "offset": [
        1008,
        1025
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "961": {
      "fn": "EMR.getUserHashData",
      "offset": [
        1008,
        1025
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "963": {
      "fn": "EMR.getUserHashData",
      "offset": [
        1008,
        1025
      ],
      "op": "ADD",
      "path": "2"
    },
    "964": {
      "fn": "EMR.getUserHashData",
      "offset": [
        1008,
        1025
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "966": {
      "fn": "EMR.getUserHashData",
      "offset": [
        1008,
        1025
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "967": {
      "fn": "EMR.getUserHashData",
      "offset": [
        1008,
        1025
      ],
      "op": "DUP1",
      "path": "2"
    },
    "968": {
      "fn": "EMR.getUserHashData",
      "offset": [
        1008,
        1025
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "969": {
      "fn": "EMR.getUserHashData",
      "offset": [
        1008,
        1025
      ],
      "op": "SUB",
      "path": "2"
    },
    "970": {
      "fn": "EMR.getUserHashData",
      "offset": [
        1008,
        1025
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "971": {
      "fn": "EMR.getUserHashData",
      "offset": [
        1008,
        1025
      ],
      "op": "KECCAK256",
      "path": "2"
    },
    "972": {
      "fn": "EMR.getUserHashData",
      "offset": [
        1008,
        1034
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x1"
    },
    "974": {
      "fn": "EMR.getUserHashData",
      "offset": [
        1008,
        1034
      ],
      "op": "ADD",
      "path": "2"
    },
    "975": {
      "fn": "EMR.getUserHashData",
      "offset": [
        1001,
        1034
      ],
      "op": "DUP1",
      "path": "2"
    },
    "976": {
      "fn": "EMR.getUserHashData",
      "offset": [
        1001,
        1034
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "977": {
      "fn": "EMR.getUserHashData",
      "offset": [
        1001,
        1034
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x2A4"
    },
    "980": {
      "fn": "EMR.getUserHashData",
      "offset": [
        1001,
        1034
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "981": {
      "fn": "EMR.getUserHashData",
      "offset": [
        1001,
        1034
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x87E"
    },
    "984": {
      "fn": "EMR.getUserHashData",
      "jump": "i",
      "offset": [
        1001,
        1034
      ],
      "op": "JUMP",
      "path": "2"
    },
    "985": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1668,
        1769
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "986": {
      "fn": "Ownable.owner",
      "offset": [
        1082,
        1089
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "988": {
      "fn": "Ownable.owner",
      "offset": [
        1108,
        1114
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "989": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "991": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "993": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "995": {
      "op": "SHL"
    },
    "996": {
      "op": "SUB"
    },
    "997": {
      "fn": "Ownable.owner",
      "offset": [
        1108,
        1114
      ],
      "op": "AND",
      "path": "0"
    },
    "998": {
      "fn": "Context._msgSender",
      "offset": [
        719,
        729
      ],
      "op": "CALLER",
      "path": "1"
    },
    "999": {
      "offset": [
        1248,
        1271
      ],
      "op": "EQ",
      "path": "0"
    },
    "1000": {
      "offset": [
        1240,
        1308
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x403"
    },
    "1003": {
      "offset": [
        1240,
        1308
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "1004": {
      "fn": "Context._msgSender",
      "offset": [
        1240,
        1308
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "1006": {
      "fn": "Context._msgSender",
      "offset": [
        1240,
        1308
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "1007": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "1011": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "1013": {
      "op": "SHL"
    },
    "1014": {
      "offset": [
        1240,
        1308
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1015": {
      "fn": "Context._msgSender",
      "offset": [
        1240,
        1308
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1016": {
      "fn": "Context._msgSender",
      "offset": [
        1240,
        1308
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "1018": {
      "fn": "Context._msgSender",
      "offset": [
        1240,
        1308
      ],
      "op": "ADD",
      "path": "0"
    },
    "1019": {
      "fn": "Context._msgSender",
      "offset": [
        1240,
        1308
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x146"
    },
    "1022": {
      "fn": "Context._msgSender",
      "offset": [
        1240,
        1308
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1023": {
      "fn": "Context._msgSender",
      "offset": [
        1240,
        1308
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x802"
    },
    "1026": {
      "fn": "Context._msgSender",
      "jump": "i",
      "offset": [
        1240,
        1308
      ],
      "op": "JUMP",
      "path": "0"
    },
    "1027": {
      "fn": "Context._msgSender",
      "offset": [
        1240,
        1308
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1028": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1732,
        1762
      ],
      "op": "PUSH2",
      "path": "0",
      "statement": 10,
      "value": "0x40D"
    },
    "1031": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1759,
        1760
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "1033": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1732,
        1750
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x542"
    },
    "1036": {
      "fn": "Ownable.renounceOwnership",
      "jump": "i",
      "offset": [
        1732,
        1762
      ],
      "op": "JUMP",
      "path": "0"
    },
    "1037": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1732,
        1762
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1038": {
      "fn": "Ownable.renounceOwnership",
      "jump": "o",
      "offset": [
        1668,
        1769
      ],
      "op": "JUMP",
      "path": "0"
    },
    "1039": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        1918,
        2116
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1040": {
      "fn": "Ownable.owner",
      "offset": [
        1082,
        1089
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "1042": {
      "fn": "Ownable.owner",
      "offset": [
        1108,
        1114
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "1043": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1045": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1047": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1049": {
      "op": "SHL"
    },
    "1050": {
      "op": "SUB"
    },
    "1051": {
      "fn": "Ownable.owner",
      "offset": [
        1108,
        1114
      ],
      "op": "AND",
      "path": "0"
    },
    "1052": {
      "fn": "Context._msgSender",
      "offset": [
        719,
        729
      ],
      "op": "CALLER",
      "path": "1"
    },
    "1053": {
      "offset": [
        1248,
        1271
      ],
      "op": "EQ",
      "path": "0"
    },
    "1054": {
      "offset": [
        1240,
        1308
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x439"
    },
    "1057": {
      "offset": [
        1240,
        1308
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "1058": {
      "fn": "Context._msgSender",
      "offset": [
        1240,
        1308
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "1060": {
      "fn": "Context._msgSender",
      "offset": [
        1240,
        1308
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "1061": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "1065": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "1067": {
      "op": "SHL"
    },
    "1068": {
      "offset": [
        1240,
        1308
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1069": {
      "fn": "Context._msgSender",
      "offset": [
        1240,
        1308
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1070": {
      "fn": "Context._msgSender",
      "offset": [
        1240,
        1308
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "1072": {
      "fn": "Context._msgSender",
      "offset": [
        1240,
        1308
      ],
      "op": "ADD",
      "path": "0"
    },
    "1073": {
      "fn": "Context._msgSender",
      "offset": [
        1240,
        1308
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x146"
    },
    "1076": {
      "fn": "Context._msgSender",
      "offset": [
        1240,
        1308
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1077": {
      "fn": "Context._msgSender",
      "offset": [
        1240,
        1308
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x802"
    },
    "1080": {
      "fn": "Context._msgSender",
      "jump": "i",
      "offset": [
        1240,
        1308
      ],
      "op": "JUMP",
      "path": "0"
    },
    "1081": {
      "fn": "Context._msgSender",
      "offset": [
        1240,
        1308
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1082": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1084": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1086": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1088": {
      "op": "SHL"
    },
    "1089": {
      "op": "SUB"
    },
    "1090": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        2006,
        2028
      ],
      "op": "DUP2",
      "path": "0",
      "statement": 11
    },
    "1091": {
      "branch": 20,
      "fn": "Ownable.transferOwnership",
      "offset": [
        2006,
        2028
      ],
      "op": "AND",
      "path": "0"
    },
    "1092": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        1998,
        2071
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x49E"
    },
    "1095": {
      "branch": 20,
      "fn": "Ownable.transferOwnership",
      "offset": [
        1998,
        2071
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "1096": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        1998,
        2071
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "1098": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        1998,
        2071
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "1099": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "1103": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "1105": {
      "op": "SHL"
    },
    "1106": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        1998,
        2071
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1107": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        1998,
        2071
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1108": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1110": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        1998,
        2071
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "1112": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        1998,
        2071
      ],
      "op": "DUP3",
      "path": "0"
    },
    "1113": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        1998,
        2071
      ],
      "op": "ADD",
      "path": "0"
    },
    "1114": {
      "op": "MSTORE"
    },
    "1115": {
      "op": "PUSH1",
      "value": "0x26"
    },
    "1117": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "1119": {
      "op": "DUP3"
    },
    "1120": {
      "op": "ADD"
    },
    "1121": {
      "op": "MSTORE"
    },
    "1122": {
      "op": "PUSH32",
      "value": "0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061"
    },
    "1155": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "1157": {
      "op": "DUP3"
    },
    "1158": {
      "op": "ADD"
    },
    "1159": {
      "op": "MSTORE"
    },
    "1160": {
      "op": "PUSH6",
      "value": "0x646472657373"
    },
    "1167": {
      "op": "PUSH1",
      "value": "0xD0"
    },
    "1169": {
      "op": "SHL"
    },
    "1170": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "1172": {
      "op": "DUP3"
    },
    "1173": {
      "op": "ADD"
    },
    "1174": {
      "op": "MSTORE"
    },
    "1175": {
      "op": "PUSH1",
      "value": "0x84"
    },
    "1177": {
      "op": "ADD"
    },
    "1178": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        1998,
        2071
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x146"
    },
    "1181": {
      "op": "JUMP"
    },
    "1182": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        1998,
        2071
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1183": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        2081,
        2109
      ],
      "op": "PUSH2",
      "path": "0",
      "statement": 12,
      "value": "0x4A7"
    },
    "1186": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        2100,
        2108
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1187": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        2081,
        2099
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x542"
    },
    "1190": {
      "fn": "Ownable.transferOwnership",
      "jump": "i",
      "offset": [
        2081,
        2109
      ],
      "op": "JUMP",
      "path": "0"
    },
    "1191": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        2081,
        2109
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1192": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        1918,
        2116
      ],
      "op": "POP",
      "path": "0"
    },
    "1193": {
      "fn": "Ownable.transferOwnership",
      "jump": "o",
      "offset": [
        1918,
        2116
      ],
      "op": "JUMP",
      "path": "0"
    },
    "1194": {
      "fn": "EMR.addUserKey",
      "offset": [
        1047,
        1257
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1195": {
      "fn": "Ownable.owner",
      "offset": [
        1082,
        1089
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "1197": {
      "fn": "Ownable.owner",
      "offset": [
        1108,
        1114
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "1198": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1200": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1202": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1204": {
      "op": "SHL"
    },
    "1205": {
      "op": "SUB"
    },
    "1206": {
      "fn": "Ownable.owner",
      "offset": [
        1108,
        1114
      ],
      "op": "AND",
      "path": "0"
    },
    "1207": {
      "fn": "Context._msgSender",
      "offset": [
        719,
        729
      ],
      "op": "CALLER",
      "path": "1"
    },
    "1208": {
      "offset": [
        1248,
        1271
      ],
      "op": "EQ",
      "path": "0"
    },
    "1209": {
      "offset": [
        1240,
        1308
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x4D4"
    },
    "1212": {
      "offset": [
        1240,
        1308
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "1213": {
      "fn": "Context._msgSender",
      "offset": [
        1240,
        1308
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "1215": {
      "fn": "Context._msgSender",
      "offset": [
        1240,
        1308
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "1216": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "1220": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "1222": {
      "op": "SHL"
    },
    "1223": {
      "offset": [
        1240,
        1308
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1224": {
      "fn": "Context._msgSender",
      "offset": [
        1240,
        1308
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "1225": {
      "fn": "Context._msgSender",
      "offset": [
        1240,
        1308
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "1227": {
      "fn": "Context._msgSender",
      "offset": [
        1240,
        1308
      ],
      "op": "ADD",
      "path": "0"
    },
    "1228": {
      "fn": "Context._msgSender",
      "offset": [
        1240,
        1308
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x146"
    },
    "1231": {
      "fn": "Context._msgSender",
      "offset": [
        1240,
        1308
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1232": {
      "fn": "Context._msgSender",
      "offset": [
        1240,
        1308
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x802"
    },
    "1235": {
      "fn": "Context._msgSender",
      "jump": "i",
      "offset": [
        1240,
        1308
      ],
      "op": "JUMP",
      "path": "0"
    },
    "1236": {
      "fn": "Context._msgSender",
      "offset": [
        1240,
        1308
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1237": {
      "fn": "EMR.addUserKey",
      "offset": [
        1196,
        1207
      ],
      "op": "DUP1",
      "path": "2",
      "statement": 13
    },
    "1238": {
      "fn": "EMR.addUserKey",
      "offset": [
        1165,
        1172
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x1"
    },
    "1240": {
      "fn": "EMR.addUserKey",
      "offset": [
        1173,
        1181
      ],
      "op": "DUP4",
      "path": "2"
    },
    "1241": {
      "fn": "EMR.addUserKey",
      "offset": [
        1165,
        1182
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "1243": {
      "fn": "EMR.addUserKey",
      "offset": [
        1165,
        1182
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "1244": {
      "fn": "EMR.addUserKey",
      "offset": [
        1165,
        1182
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x4E5"
    },
    "1247": {
      "fn": "EMR.addUserKey",
      "offset": [
        1165,
        1182
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "1248": {
      "fn": "EMR.addUserKey",
      "offset": [
        1165,
        1182
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1249": {
      "fn": "EMR.addUserKey",
      "offset": [
        1165,
        1182
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x837"
    },
    "1252": {
      "fn": "EMR.addUserKey",
      "jump": "i",
      "offset": [
        1165,
        1182
      ],
      "op": "JUMP",
      "path": "2"
    },
    "1253": {
      "fn": "EMR.addUserKey",
      "offset": [
        1165,
        1182
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1254": {
      "fn": "EMR.addUserKey",
      "offset": [
        1165,
        1182
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1255": {
      "fn": "EMR.addUserKey",
      "offset": [
        1165,
        1182
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1256": {
      "fn": "EMR.addUserKey",
      "offset": [
        1165,
        1182
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "1257": {
      "fn": "EMR.addUserKey",
      "offset": [
        1165,
        1182
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "1259": {
      "fn": "EMR.addUserKey",
      "offset": [
        1165,
        1182
      ],
      "op": "ADD",
      "path": "2"
    },
    "1260": {
      "fn": "EMR.addUserKey",
      "offset": [
        1165,
        1182
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "1262": {
      "fn": "EMR.addUserKey",
      "offset": [
        1165,
        1182
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "1263": {
      "fn": "EMR.addUserKey",
      "offset": [
        1165,
        1182
      ],
      "op": "DUP1",
      "path": "2"
    },
    "1264": {
      "fn": "EMR.addUserKey",
      "offset": [
        1165,
        1182
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "1265": {
      "fn": "EMR.addUserKey",
      "offset": [
        1165,
        1182
      ],
      "op": "SUB",
      "path": "2"
    },
    "1266": {
      "fn": "EMR.addUserKey",
      "offset": [
        1165,
        1182
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1267": {
      "fn": "EMR.addUserKey",
      "offset": [
        1165,
        1182
      ],
      "op": "KECCAK256",
      "path": "2"
    },
    "1268": {
      "fn": "EMR.addUserKey",
      "offset": [
        1165,
        1193
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "1270": {
      "fn": "EMR.addUserKey",
      "offset": [
        1165,
        1193
      ],
      "op": "ADD",
      "path": "2"
    },
    "1271": {
      "fn": "EMR.addUserKey",
      "offset": [
        1165,
        1207
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1272": {
      "fn": "EMR.addUserKey",
      "offset": [
        1165,
        1207
      ],
      "op": "DUP1",
      "path": "2"
    },
    "1273": {
      "fn": "EMR.addUserKey",
      "offset": [
        1165,
        1207
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "1274": {
      "fn": "EMR.addUserKey",
      "offset": [
        1165,
        1207
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1275": {
      "fn": "EMR.addUserKey",
      "offset": [
        1165,
        1207
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "1277": {
      "fn": "EMR.addUserKey",
      "offset": [
        1165,
        1207
      ],
      "op": "ADD",
      "path": "2"
    },
    "1278": {
      "fn": "EMR.addUserKey",
      "offset": [
        1165,
        1207
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1279": {
      "fn": "EMR.addUserKey",
      "offset": [
        1165,
        1207
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x509"
    },
    "1282": {
      "fn": "EMR.addUserKey",
      "offset": [
        1165,
        1207
      ],
      "op": "SWAP3",
      "path": "2"
    },
    "1283": {
      "fn": "EMR.addUserKey",
      "offset": [
        1165,
        1207
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "1284": {
      "fn": "EMR.addUserKey",
      "offset": [
        1165,
        1207
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1285": {
      "fn": "EMR.addUserKey",
      "offset": [
        1165,
        1207
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x592"
    },
    "1288": {
      "fn": "EMR.addUserKey",
      "jump": "i",
      "offset": [
        1165,
        1207
      ],
      "op": "JUMP",
      "path": "2"
    },
    "1289": {
      "fn": "EMR.addUserKey",
      "offset": [
        1165,
        1207
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1290": {
      "fn": "EMR.addUserKey",
      "offset": [
        1165,
        1207
      ],
      "op": "POP",
      "path": "2"
    },
    "1291": {
      "fn": "EMR.addUserKey",
      "offset": [
        1246,
        1250
      ],
      "op": "PUSH1",
      "path": "2",
      "statement": 14,
      "value": "0x1"
    },
    "1293": {
      "fn": "EMR.addUserKey",
      "offset": [
        1217,
        1224
      ],
      "op": "DUP1",
      "path": "2"
    },
    "1294": {
      "fn": "EMR.addUserKey",
      "offset": [
        1225,
        1233
      ],
      "op": "DUP4",
      "path": "2"
    },
    "1295": {
      "fn": "EMR.addUserKey",
      "offset": [
        1217,
        1234
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "1297": {
      "fn": "EMR.addUserKey",
      "offset": [
        1217,
        1234
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "1298": {
      "fn": "EMR.addUserKey",
      "offset": [
        1217,
        1234
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x51B"
    },
    "1301": {
      "fn": "EMR.addUserKey",
      "offset": [
        1217,
        1234
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "1302": {
      "fn": "EMR.addUserKey",
      "offset": [
        1217,
        1234
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1303": {
      "fn": "EMR.addUserKey",
      "offset": [
        1217,
        1234
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x837"
    },
    "1306": {
      "fn": "EMR.addUserKey",
      "jump": "i",
      "offset": [
        1217,
        1234
      ],
      "op": "JUMP",
      "path": "2"
    },
    "1307": {
      "fn": "EMR.addUserKey",
      "offset": [
        1217,
        1234
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1308": {
      "fn": "EMR.addUserKey",
      "offset": [
        1217,
        1234
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1309": {
      "fn": "EMR.addUserKey",
      "offset": [
        1217,
        1234
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1310": {
      "fn": "EMR.addUserKey",
      "offset": [
        1217,
        1234
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "1311": {
      "fn": "EMR.addUserKey",
      "offset": [
        1217,
        1234
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "1313": {
      "fn": "EMR.addUserKey",
      "offset": [
        1217,
        1234
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "1314": {
      "fn": "EMR.addUserKey",
      "offset": [
        1217,
        1234
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1315": {
      "fn": "EMR.addUserKey",
      "offset": [
        1217,
        1234
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1316": {
      "fn": "EMR.addUserKey",
      "offset": [
        1217,
        1234
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1317": {
      "fn": "EMR.addUserKey",
      "offset": [
        1217,
        1234
      ],
      "op": "SUB",
      "path": "2"
    },
    "1318": {
      "fn": "EMR.addUserKey",
      "offset": [
        1217,
        1234
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "1320": {
      "fn": "EMR.addUserKey",
      "offset": [
        1217,
        1234
      ],
      "op": "ADD",
      "path": "2"
    },
    "1321": {
      "fn": "EMR.addUserKey",
      "offset": [
        1217,
        1234
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1322": {
      "fn": "EMR.addUserKey",
      "offset": [
        1217,
        1234
      ],
      "op": "KECCAK256",
      "path": "2"
    },
    "1323": {
      "fn": "EMR.addUserKey",
      "offset": [
        1217,
        1243
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x2"
    },
    "1325": {
      "fn": "EMR.addUserKey",
      "offset": [
        1217,
        1243
      ],
      "op": "ADD",
      "path": "2"
    },
    "1326": {
      "fn": "EMR.addUserKey",
      "offset": [
        1217,
        1250
      ],
      "op": "DUP1",
      "path": "2"
    },
    "1327": {
      "fn": "EMR.addUserKey",
      "offset": [
        1217,
        1250
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "1328": {
      "fn": "EMR.addUserKey",
      "offset": [
        1217,
        1250
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "1329": {
      "fn": "EMR.addUserKey",
      "offset": [
        1217,
        1250
      ],
      "op": "ISZERO",
      "path": "2"
    },
    "1330": {
      "fn": "EMR.addUserKey",
      "offset": [
        1217,
        1250
      ],
      "op": "ISZERO",
      "path": "2"
    },
    "1331": {
      "op": "PUSH1",
      "value": "0xFF"
    },
    "1333": {
      "op": "NOT"
    },
    "1334": {
      "fn": "EMR.addUserKey",
      "offset": [
        1217,
        1250
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1335": {
      "fn": "EMR.addUserKey",
      "offset": [
        1217,
        1250
      ],
      "op": "SWAP3",
      "path": "2"
    },
    "1336": {
      "fn": "EMR.addUserKey",
      "offset": [
        1217,
        1250
      ],
      "op": "AND",
      "path": "2"
    },
    "1337": {
      "fn": "EMR.addUserKey",
      "offset": [
        1217,
        1250
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "1338": {
      "fn": "EMR.addUserKey",
      "offset": [
        1217,
        1250
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1339": {
      "fn": "EMR.addUserKey",
      "offset": [
        1217,
        1250
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "1340": {
      "fn": "EMR.addUserKey",
      "offset": [
        1217,
        1250
      ],
      "op": "OR",
      "path": "2"
    },
    "1341": {
      "fn": "EMR.addUserKey",
      "offset": [
        1217,
        1250
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1342": {
      "fn": "EMR.addUserKey",
      "offset": [
        1217,
        1250
      ],
      "op": "SSTORE",
      "path": "2"
    },
    "1343": {
      "op": "POP"
    },
    "1344": {
      "op": "POP"
    },
    "1345": {
      "fn": "EMR.addUserKey",
      "jump": "o",
      "offset": [
        1047,
        1257
      ],
      "op": "JUMP",
      "path": "2"
    },
    "1346": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2270,
        2457
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1347": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2343,
        2359
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "1349": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2362,
        2368
      ],
      "op": "DUP1",
      "path": "0"
    },
    "1350": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2362,
        2368
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "1351": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1353": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1355": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1357": {
      "op": "SHL"
    },
    "1358": {
      "op": "SUB"
    },
    "1359": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2378,
        2395
      ],
      "op": "DUP4",
      "path": "0",
      "statement": 15
    },
    "1360": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2378,
        2395
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1361": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2378,
        2395
      ],
      "op": "AND",
      "path": "0"
    },
    "1362": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1364": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1366": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1368": {
      "op": "SHL"
    },
    "1369": {
      "op": "SUB"
    },
    "1370": {
      "op": "NOT"
    },
    "1371": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2378,
        2395
      ],
      "op": "DUP4",
      "path": "0"
    },
    "1372": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2378,
        2395
      ],
      "op": "AND",
      "path": "0"
    },
    "1373": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2378,
        2395
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1374": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2378,
        2395
      ],
      "op": "OR",
      "path": "0"
    },
    "1375": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2378,
        2395
      ],
      "op": "DUP5",
      "path": "0"
    },
    "1376": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2378,
        2395
      ],
      "op": "SSTORE",
      "path": "0"
    },
    "1377": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2410,
        2450
      ],
      "op": "PUSH1",
      "path": "0",
      "statement": 16,
      "value": "0x40"
    },
    "1379": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2410,
        2450
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "1380": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2362,
        2368
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "1381": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2362,
        2368
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1382": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2362,
        2368
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "1383": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2362,
        2368
      ],
      "op": "AND",
      "path": "0"
    },
    "1384": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2362,
        2368
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "1385": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2362,
        2368
      ],
      "op": "DUP4",
      "path": "0"
    },
    "1386": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2362,
        2368
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "1387": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2410,
        2450
      ],
      "op": "PUSH32",
      "path": "0",
      "value": "0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0"
    },
    "1420": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2410,
        2450
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "1421": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2343,
        2359
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1422": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2410,
        2450
      ],
      "op": "LOG3",
      "path": "0"
    },
    "1423": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2333,
        2457
      ],
      "op": "POP",
      "path": "0"
    },
    "1424": {
      "fn": "Ownable._transferOwnership",
      "offset": [
        2270,
        2457
      ],
      "op": "POP",
      "path": "0"
    },
    "1425": {
      "fn": "Ownable._transferOwnership",
      "jump": "o",
      "offset": [
        2270,
        2457
      ],
      "op": "JUMP",
      "path": "0"
    },
    "1426": {
      "op": "JUMPDEST"
    },
    "1427": {
      "op": "DUP3"
    },
    "1428": {
      "op": "DUP1"
    },
    "1429": {
      "op": "SLOAD"
    },
    "1430": {
      "op": "PUSH2",
      "value": "0x59E"
    },
    "1433": {
      "op": "SWAP1"
    },
    "1434": {
      "op": "PUSH2",
      "value": "0x87E"
    },
    "1437": {
      "jump": "i",
      "op": "JUMP"
    },
    "1438": {
      "op": "JUMPDEST"
    },
    "1439": {
      "op": "SWAP1"
    },
    "1440": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1442": {
      "op": "MSTORE"
    },
    "1443": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1445": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1447": {
      "op": "KECCAK256"
    },
    "1448": {
      "op": "SWAP1"
    },
    "1449": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "1451": {
      "op": "ADD"
    },
    "1452": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1454": {
      "op": "SWAP1"
    },
    "1455": {
      "op": "DIV"
    },
    "1456": {
      "op": "DUP2"
    },
    "1457": {
      "op": "ADD"
    },
    "1458": {
      "op": "SWAP3"
    },
    "1459": {
      "op": "DUP3"
    },
    "1460": {
      "op": "PUSH2",
      "value": "0x5C0"
    },
    "1463": {
      "op": "JUMPI"
    },
    "1464": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1466": {
      "op": "DUP6"
    },
    "1467": {
      "op": "SSTORE"
    },
    "1468": {
      "op": "PUSH2",
      "value": "0x606"
    },
    "1471": {
      "op": "JUMP"
    },
    "1472": {
      "op": "JUMPDEST"
    },
    "1473": {
      "op": "DUP3"
    },
    "1474": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "1476": {
      "op": "LT"
    },
    "1477": {
      "op": "PUSH2",
      "value": "0x5D9"
    },
    "1480": {
      "op": "JUMPI"
    },
    "1481": {
      "op": "DUP1"
    },
    "1482": {
      "op": "MLOAD"
    },
    "1483": {
      "op": "PUSH1",
      "value": "0xFF"
    },
    "1485": {
      "op": "NOT"
    },
    "1486": {
      "op": "AND"
    },
    "1487": {
      "op": "DUP4"
    },
    "1488": {
      "op": "DUP1"
    },
    "1489": {
      "op": "ADD"
    },
    "1490": {
      "op": "OR"
    },
    "1491": {
      "op": "DUP6"
    },
    "1492": {
      "op": "SSTORE"
    },
    "1493": {
      "op": "PUSH2",
      "value": "0x606"
    },
    "1496": {
      "op": "JUMP"
    },
    "1497": {
      "op": "JUMPDEST"
    },
    "1498": {
      "op": "DUP3"
    },
    "1499": {
      "op": "DUP1"
    },
    "1500": {
      "op": "ADD"
    },
    "1501": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1503": {
      "op": "ADD"
    },
    "1504": {
      "op": "DUP6"
    },
    "1505": {
      "op": "SSTORE"
    },
    "1506": {
      "op": "DUP3"
    },
    "1507": {
      "op": "ISZERO"
    },
    "1508": {
      "op": "PUSH2",
      "value": "0x606"
    },
    "1511": {
      "op": "JUMPI"
    },
    "1512": {
      "op": "SWAP2"
    },
    "1513": {
      "op": "DUP3"
    },
    "1514": {
      "op": "ADD"
    },
    "1515": {
      "op": "JUMPDEST"
    },
    "1516": {
      "op": "DUP3"
    },
    "1517": {
      "op": "DUP2"
    },
    "1518": {
      "op": "GT"
    },
    "1519": {
      "op": "ISZERO"
    },
    "1520": {
      "op": "PUSH2",
      "value": "0x606"
    },
    "1523": {
      "op": "JUMPI"
    },
    "1524": {
      "op": "DUP3"
    },
    "1525": {
      "op": "MLOAD"
    },
    "1526": {
      "op": "DUP3"
    },
    "1527": {
      "op": "SSTORE"
    },
    "1528": {
      "op": "SWAP2"
    },
    "1529": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1531": {
      "op": "ADD"
    },
    "1532": {
      "op": "SWAP2"
    },
    "1533": {
      "op": "SWAP1"
    },
    "1534": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1536": {
      "op": "ADD"
    },
    "1537": {
      "op": "SWAP1"
    },
    "1538": {
      "op": "PUSH2",
      "value": "0x5EB"
    },
    "1541": {
      "op": "JUMP"
    },
    "1542": {
      "op": "JUMPDEST"
    },
    "1543": {
      "op": "POP"
    },
    "1544": {
      "op": "PUSH2",
      "value": "0x612"
    },
    "1547": {
      "op": "SWAP3"
    },
    "1548": {
      "op": "SWAP2"
    },
    "1549": {
      "op": "POP"
    },
    "1550": {
      "op": "PUSH2",
      "value": "0x616"
    },
    "1553": {
      "jump": "i",
      "op": "JUMP"
    },
    "1554": {
      "op": "JUMPDEST"
    },
    "1555": {
      "op": "POP"
    },
    "1556": {
      "op": "SWAP1"
    },
    "1557": {
      "jump": "o",
      "op": "JUMP"
    },
    "1558": {
      "op": "JUMPDEST"
    },
    "1559": {
      "op": "JUMPDEST"
    },
    "1560": {
      "op": "DUP1"
    },
    "1561": {
      "op": "DUP3"
    },
    "1562": {
      "op": "GT"
    },
    "1563": {
      "op": "ISZERO"
    },
    "1564": {
      "op": "PUSH2",
      "value": "0x612"
    },
    "1567": {
      "op": "JUMPI"
    },
    "1568": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1570": {
      "op": "DUP2"
    },
    "1571": {
      "op": "SSTORE"
    },
    "1572": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1574": {
      "op": "ADD"
    },
    "1575": {
      "op": "PUSH2",
      "value": "0x617"
    },
    "1578": {
      "op": "JUMP"
    },
    "1579": {
      "op": "JUMPDEST"
    },
    "1580": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "1585": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "1587": {
      "op": "SHL"
    },
    "1588": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1590": {
      "op": "MSTORE"
    },
    "1591": {
      "op": "PUSH1",
      "value": "0x41"
    },
    "1593": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "1595": {
      "op": "MSTORE"
    },
    "1596": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "1598": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1600": {
      "op": "REVERT"
    },
    "1601": {
      "op": "JUMPDEST"
    },
    "1602": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1604": {
      "op": "DUP3"
    },
    "1605": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "1607": {
      "op": "DUP4"
    },
    "1608": {
      "op": "ADD"
    },
    "1609": {
      "op": "SLT"
    },
    "1610": {
      "op": "PUSH2",
      "value": "0x652"
    },
    "1613": {
      "op": "JUMPI"
    },
    "1614": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1616": {
      "op": "DUP1"
    },
    "1617": {
      "op": "REVERT"
    },
    "1618": {
      "op": "JUMPDEST"
    },
    "1619": {
      "op": "DUP2"
    },
    "1620": {
      "op": "CALLDATALOAD"
    },
    "1621": {
      "op": "PUSH8",
      "value": "0xFFFFFFFFFFFFFFFF"
    },
    "1630": {
      "op": "DUP1"
    },
    "1631": {
      "op": "DUP3"
    },
    "1632": {
      "op": "GT"
    },
    "1633": {
      "op": "ISZERO"
    },
    "1634": {
      "op": "PUSH2",
      "value": "0x66D"
    },
    "1637": {
      "op": "JUMPI"
    },
    "1638": {
      "op": "PUSH2",
      "value": "0x66D"
    },
    "1641": {
      "op": "PUSH2",
      "value": "0x62B"
    },
    "1644": {
      "jump": "i",
      "op": "JUMP"
    },
    "1645": {
      "op": "JUMPDEST"
    },
    "1646": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "1648": {
      "op": "MLOAD"
    },
    "1649": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "1651": {
      "op": "DUP4"
    },
    "1652": {
      "op": "ADD"
    },
    "1653": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "1655": {
      "op": "NOT"
    },
    "1656": {
      "op": "SWAP1"
    },
    "1657": {
      "op": "DUP2"
    },
    "1658": {
      "op": "AND"
    },
    "1659": {
      "op": "PUSH1",
      "value": "0x3F"
    },
    "1661": {
      "op": "ADD"
    },
    "1662": {
      "op": "AND"
    },
    "1663": {
      "op": "DUP2"
    },
    "1664": {
      "op": "ADD"
    },
    "1665": {
      "op": "SWAP1"
    },
    "1666": {
      "op": "DUP3"
    },
    "1667": {
      "op": "DUP3"
    },
    "1668": {
      "op": "GT"
    },
    "1669": {
      "op": "DUP2"
    },
    "1670": {
      "op": "DUP4"
    },
    "1671": {
      "op": "LT"
    },
    "1672": {
      "op": "OR"
    },
    "1673": {
      "op": "ISZERO"
    },
    "1674": {
      "op": "PUSH2",
      "value": "0x695"
    },
    "1677": {
      "op": "JUMPI"
    },
    "1678": {
      "op": "PUSH2",
      "value": "0x695"
    },
    "1681": {
      "op": "PUSH2",
      "value": "0x62B"
    },
    "1684": {
      "jump": "i",
      "op": "JUMP"
    },
    "1685": {
      "op": "JUMPDEST"
    },
    "1686": {
      "op": "DUP2"
    },
    "1687": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "1689": {
      "op": "MSTORE"
    },
    "1690": {
      "op": "DUP4"
    },
    "1691": {
      "op": "DUP2"
    },
    "1692": {
      "op": "MSTORE"
    },
    "1693": {
      "op": "DUP7"
    },
    "1694": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1696": {
      "op": "DUP6"
    },
    "1697": {
      "op": "DUP9"
    },
    "1698": {
      "op": "ADD"
    },
    "1699": {
      "op": "ADD"
    },
    "1700": {
      "op": "GT"
    },
    "1701": {
      "op": "ISZERO"
    },
    "1702": {
      "op": "PUSH2",
      "value": "0x6AE"
    },
    "1705": {
      "op": "JUMPI"
    },
    "1706": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1708": {
      "op": "DUP1"
    },
    "1709": {
      "op": "REVERT"
    },
    "1710": {
      "op": "JUMPDEST"
    },
    "1711": {
      "op": "DUP4"
    },
    "1712": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1714": {
      "op": "DUP8"
    },
    "1715": {
      "op": "ADD"
    },
    "1716": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1718": {
      "op": "DUP4"
    },
    "1719": {
      "op": "ADD"
    },
    "1720": {
      "op": "CALLDATACOPY"
    },
    "1721": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1723": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1725": {
      "op": "DUP6"
    },
    "1726": {
      "op": "DUP4"
    },
    "1727": {
      "op": "ADD"
    },
    "1728": {
      "op": "ADD"
    },
    "1729": {
      "op": "MSTORE"
    },
    "1730": {
      "op": "DUP1"
    },
    "1731": {
      "op": "SWAP5"
    },
    "1732": {
      "op": "POP"
    },
    "1733": {
      "op": "POP"
    },
    "1734": {
      "op": "POP"
    },
    "1735": {
      "op": "POP"
    },
    "1736": {
      "op": "POP"
    },
    "1737": {
      "op": "SWAP3"
    },
    "1738": {
      "op": "SWAP2"
    },
    "1739": {
      "op": "POP"
    },
    "1740": {
      "op": "POP"
    },
    "1741": {
      "jump": "o",
      "op": "JUMP"
    },
    "1742": {
      "op": "JUMPDEST"
    },
    "1743": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1745": {
      "op": "DUP1"
    },
    "1746": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "1748": {
      "op": "DUP4"
    },
    "1749": {
      "op": "DUP6"
    },
    "1750": {
      "op": "SUB"
    },
    "1751": {
      "op": "SLT"
    },
    "1752": {
      "op": "ISZERO"
    },
    "1753": {
      "op": "PUSH2",
      "value": "0x6E1"
    },
    "1756": {
      "op": "JUMPI"
    },
    "1757": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1759": {
      "op": "DUP1"
    },
    "1760": {
      "op": "REVERT"
    },
    "1761": {
      "op": "JUMPDEST"
    },
    "1762": {
      "op": "DUP3"
    },
    "1763": {
      "op": "CALLDATALOAD"
    },
    "1764": {
      "op": "PUSH8",
      "value": "0xFFFFFFFFFFFFFFFF"
    },
    "1773": {
      "op": "DUP1"
    },
    "1774": {
      "op": "DUP3"
    },
    "1775": {
      "op": "GT"
    },
    "1776": {
      "op": "ISZERO"
    },
    "1777": {
      "op": "PUSH2",
      "value": "0x6F9"
    },
    "1780": {
      "op": "JUMPI"
    },
    "1781": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1783": {
      "op": "DUP1"
    },
    "1784": {
      "op": "REVERT"
    },
    "1785": {
      "op": "JUMPDEST"
    },
    "1786": {
      "op": "PUSH2",
      "value": "0x705"
    },
    "1789": {
      "op": "DUP7"
    },
    "1790": {
      "op": "DUP4"
    },
    "1791": {
      "op": "DUP8"
    },
    "1792": {
      "op": "ADD"
    },
    "1793": {
      "op": "PUSH2",
      "value": "0x641"
    },
    "1796": {
      "jump": "i",
      "op": "JUMP"
    },
    "1797": {
      "op": "JUMPDEST"
    },
    "1798": {
      "op": "SWAP4"
    },
    "1799": {
      "op": "POP"
    },
    "1800": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1802": {
      "op": "DUP6"
    },
    "1803": {
      "op": "ADD"
    },
    "1804": {
      "op": "CALLDATALOAD"
    },
    "1805": {
      "op": "SWAP2"
    },
    "1806": {
      "op": "POP"
    },
    "1807": {
      "op": "DUP1"
    },
    "1808": {
      "op": "DUP3"
    },
    "1809": {
      "op": "GT"
    },
    "1810": {
      "op": "ISZERO"
    },
    "1811": {
      "op": "PUSH2",
      "value": "0x71B"
    },
    "1814": {
      "op": "JUMPI"
    },
    "1815": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1817": {
      "op": "DUP1"
    },
    "1818": {
      "op": "REVERT"
    },
    "1819": {
      "op": "JUMPDEST"
    },
    "1820": {
      "op": "POP"
    },
    "1821": {
      "op": "PUSH2",
      "value": "0x728"
    },
    "1824": {
      "op": "DUP6"
    },
    "1825": {
      "op": "DUP3"
    },
    "1826": {
      "op": "DUP7"
    },
    "1827": {
      "op": "ADD"
    },
    "1828": {
      "op": "PUSH2",
      "value": "0x641"
    },
    "1831": {
      "jump": "i",
      "op": "JUMP"
    },
    "1832": {
      "op": "JUMPDEST"
    },
    "1833": {
      "op": "SWAP2"
    },
    "1834": {
      "op": "POP"
    },
    "1835": {
      "op": "POP"
    },
    "1836": {
      "op": "SWAP3"
    },
    "1837": {
      "op": "POP"
    },
    "1838": {
      "op": "SWAP3"
    },
    "1839": {
      "op": "SWAP1"
    },
    "1840": {
      "op": "POP"
    },
    "1841": {
      "jump": "o",
      "op": "JUMP"
    },
    "1842": {
      "op": "JUMPDEST"
    },
    "1843": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1845": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1847": {
      "op": "DUP3"
    },
    "1848": {
      "op": "DUP5"
    },
    "1849": {
      "op": "SUB"
    },
    "1850": {
      "op": "SLT"
    },
    "1851": {
      "op": "ISZERO"
    },
    "1852": {
      "op": "PUSH2",
      "value": "0x744"
    },
    "1855": {
      "op": "JUMPI"
    },
    "1856": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1858": {
      "op": "DUP1"
    },
    "1859": {
      "op": "REVERT"
    },
    "1860": {
      "op": "JUMPDEST"
    },
    "1861": {
      "op": "DUP2"
    },
    "1862": {
      "op": "CALLDATALOAD"
    },
    "1863": {
      "op": "PUSH8",
      "value": "0xFFFFFFFFFFFFFFFF"
    },
    "1872": {
      "op": "DUP2"
    },
    "1873": {
      "op": "GT"
    },
    "1874": {
      "op": "ISZERO"
    },
    "1875": {
      "op": "PUSH2",
      "value": "0x75B"
    },
    "1878": {
      "op": "JUMPI"
    },
    "1879": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1881": {
      "op": "DUP1"
    },
    "1882": {
      "op": "REVERT"
    },
    "1883": {
      "op": "JUMPDEST"
    },
    "1884": {
      "op": "PUSH2",
      "value": "0x767"
    },
    "1887": {
      "op": "DUP5"
    },
    "1888": {
      "op": "DUP3"
    },
    "1889": {
      "op": "DUP6"
    },
    "1890": {
      "op": "ADD"
    },
    "1891": {
      "op": "PUSH2",
      "value": "0x641"
    },
    "1894": {
      "jump": "i",
      "op": "JUMP"
    },
    "1895": {
      "op": "JUMPDEST"
    },
    "1896": {
      "op": "SWAP5"
    },
    "1897": {
      "op": "SWAP4"
    },
    "1898": {
      "op": "POP"
    },
    "1899": {
      "op": "POP"
    },
    "1900": {
      "op": "POP"
    },
    "1901": {
      "op": "POP"
    },
    "1902": {
      "jump": "o",
      "op": "JUMP"
    },
    "1903": {
      "op": "JUMPDEST"
    },
    "1904": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1906": {
      "op": "JUMPDEST"
    },
    "1907": {
      "op": "DUP4"
    },
    "1908": {
      "op": "DUP2"
    },
    "1909": {
      "op": "LT"
    },
    "1910": {
      "op": "ISZERO"
    },
    "1911": {
      "op": "PUSH2",
      "value": "0x78A"
    },
    "1914": {
      "op": "JUMPI"
    },
    "1915": {
      "op": "DUP2"
    },
    "1916": {
      "op": "DUP2"
    },
    "1917": {
      "op": "ADD"
    },
    "1918": {
      "op": "MLOAD"
    },
    "1919": {
      "op": "DUP4"
    },
    "1920": {
      "op": "DUP3"
    },
    "1921": {
      "op": "ADD"
    },
    "1922": {
      "op": "MSTORE"
    },
    "1923": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1925": {
      "op": "ADD"
    },
    "1926": {
      "op": "PUSH2",
      "value": "0x772"
    },
    "1929": {
      "op": "JUMP"
    },
    "1930": {
      "op": "JUMPDEST"
    },
    "1931": {
      "op": "DUP4"
    },
    "1932": {
      "op": "DUP2"
    },
    "1933": {
      "op": "GT"
    },
    "1934": {
      "op": "ISZERO"
    },
    "1935": {
      "op": "PUSH2",
      "value": "0x799"
    },
    "1938": {
      "op": "JUMPI"
    },
    "1939": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1941": {
      "op": "DUP5"
    },
    "1942": {
      "op": "DUP5"
    },
    "1943": {
      "op": "ADD"
    },
    "1944": {
      "op": "MSTORE"
    },
    "1945": {
      "op": "JUMPDEST"
    },
    "1946": {
      "op": "POP"
    },
    "1947": {
      "op": "POP"
    },
    "1948": {
      "op": "POP"
    },
    "1949": {
      "op": "POP"
    },
    "1950": {
      "jump": "o",
      "op": "JUMP"
    },
    "1951": {
      "op": "JUMPDEST"
    },
    "1952": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1954": {
      "op": "DUP2"
    },
    "1955": {
      "op": "MSTORE"
    },
    "1956": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1958": {
      "op": "DUP3"
    },
    "1959": {
      "op": "MLOAD"
    },
    "1960": {
      "op": "DUP1"
    },
    "1961": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1963": {
      "op": "DUP5"
    },
    "1964": {
      "op": "ADD"
    },
    "1965": {
      "op": "MSTORE"
    },
    "1966": {
      "op": "PUSH2",
      "value": "0x7BE"
    },
    "1969": {
      "op": "DUP2"
    },
    "1970": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "1972": {
      "op": "DUP6"
    },
    "1973": {
      "op": "ADD"
    },
    "1974": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1976": {
      "op": "DUP8"
    },
    "1977": {
      "op": "ADD"
    },
    "1978": {
      "op": "PUSH2",
      "value": "0x76F"
    },
    "1981": {
      "jump": "i",
      "op": "JUMP"
    },
    "1982": {
      "op": "JUMPDEST"
    },
    "1983": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "1985": {
      "op": "ADD"
    },
    "1986": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "1988": {
      "op": "NOT"
    },
    "1989": {
      "op": "AND"
    },
    "1990": {
      "op": "SWAP2"
    },
    "1991": {
      "op": "SWAP1"
    },
    "1992": {
      "op": "SWAP2"
    },
    "1993": {
      "op": "ADD"
    },
    "1994": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "1996": {
      "op": "ADD"
    },
    "1997": {
      "op": "SWAP3"
    },
    "1998": {
      "op": "SWAP2"
    },
    "1999": {
      "op": "POP"
    },
    "2000": {
      "op": "POP"
    },
    "2001": {
      "jump": "o",
      "op": "JUMP"
    },
    "2002": {
      "op": "JUMPDEST"
    },
    "2003": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2005": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2007": {
      "op": "DUP3"
    },
    "2008": {
      "op": "DUP5"
    },
    "2009": {
      "op": "SUB"
    },
    "2010": {
      "op": "SLT"
    },
    "2011": {
      "op": "ISZERO"
    },
    "2012": {
      "op": "PUSH2",
      "value": "0x7E4"
    },
    "2015": {
      "op": "JUMPI"
    },
    "2016": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2018": {
      "op": "DUP1"
    },
    "2019": {
      "op": "REVERT"
    },
    "2020": {
      "op": "JUMPDEST"
    },
    "2021": {
      "op": "DUP2"
    },
    "2022": {
      "op": "CALLDATALOAD"
    },
    "2023": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2025": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2027": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2029": {
      "op": "SHL"
    },
    "2030": {
      "op": "SUB"
    },
    "2031": {
      "op": "DUP2"
    },
    "2032": {
      "op": "AND"
    },
    "2033": {
      "op": "DUP2"
    },
    "2034": {
      "op": "EQ"
    },
    "2035": {
      "op": "PUSH2",
      "value": "0x7FB"
    },
    "2038": {
      "op": "JUMPI"
    },
    "2039": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2041": {
      "op": "DUP1"
    },
    "2042": {
      "op": "REVERT"
    },
    "2043": {
      "op": "JUMPDEST"
    },
    "2044": {
      "op": "SWAP4"
    },
    "2045": {
      "op": "SWAP3"
    },
    "2046": {
      "op": "POP"
    },
    "2047": {
      "op": "POP"
    },
    "2048": {
      "op": "POP"
    },
    "2049": {
      "jump": "o",
      "op": "JUMP"
    },
    "2050": {
      "op": "JUMPDEST"
    },
    "2051": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2053": {
      "op": "DUP1"
    },
    "2054": {
      "op": "DUP3"
    },
    "2055": {
      "op": "MSTORE"
    },
    "2056": {
      "op": "DUP2"
    },
    "2057": {
      "op": "DUP2"
    },
    "2058": {
      "op": "ADD"
    },
    "2059": {
      "op": "MSTORE"
    },
    "2060": {
      "op": "PUSH32",
      "value": "0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572"
    },
    "2093": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "2095": {
      "op": "DUP3"
    },
    "2096": {
      "op": "ADD"
    },
    "2097": {
      "op": "MSTORE"
    },
    "2098": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "2100": {
      "op": "ADD"
    },
    "2101": {
      "op": "SWAP1"
    },
    "2102": {
      "jump": "o",
      "op": "JUMP"
    },
    "2103": {
      "op": "JUMPDEST"
    },
    "2104": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2106": {
      "op": "DUP3"
    },
    "2107": {
      "op": "MLOAD"
    },
    "2108": {
      "op": "PUSH2",
      "value": "0x849"
    },
    "2111": {
      "op": "DUP2"
    },
    "2112": {
      "op": "DUP5"
    },
    "2113": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2115": {
      "op": "DUP8"
    },
    "2116": {
      "op": "ADD"
    },
    "2117": {
      "op": "PUSH2",
      "value": "0x76F"
    },
    "2120": {
      "jump": "i",
      "op": "JUMP"
    },
    "2121": {
      "op": "JUMPDEST"
    },
    "2122": {
      "op": "SWAP2"
    },
    "2123": {
      "op": "SWAP1"
    },
    "2124": {
      "op": "SWAP2"
    },
    "2125": {
      "op": "ADD"
    },
    "2126": {
      "op": "SWAP3"
    },
    "2127": {
      "op": "SWAP2"
    },
    "2128": {
      "op": "POP"
    },
    "2129": {
      "op": "POP"
    },
    "2130": {
      "jump": "o",
      "op": "JUMP"
    },
    "2131": {
      "op": "JUMPDEST"
    },
    "2132": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2134": {
      "op": "DUP1"
    },
    "2135": {
      "op": "DUP3"
    },
    "2136": {
      "op": "MSTORE"
    },
    "2137": {
      "op": "PUSH1",
      "value": "0x11"
    },
    "2139": {
      "op": "SWAP1"
    },
    "2140": {
      "op": "DUP3"
    },
    "2141": {
      "op": "ADD"
    },
    "2142": {
      "op": "MSTORE"
    },
    "2143": {
      "op": "PUSH17",
      "value": "0x4E6F2050617469656E7420466F756E6421"
    },
    "2161": {
      "op": "PUSH1",
      "value": "0x78"
    },
    "2163": {
      "op": "SHL"
    },
    "2164": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "2166": {
      "op": "DUP3"
    },
    "2167": {
      "op": "ADD"
    },
    "2168": {
      "op": "MSTORE"
    },
    "2169": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "2171": {
      "op": "ADD"
    },
    "2172": {
      "op": "SWAP1"
    },
    "2173": {
      "jump": "o",
      "op": "JUMP"
    },
    "2174": {
      "op": "JUMPDEST"
    },
    "2175": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2177": {
      "op": "DUP2"
    },
    "2178": {
      "op": "DUP2"
    },
    "2179": {
      "op": "SHR"
    },
    "2180": {
      "op": "SWAP1"
    },
    "2181": {
      "op": "DUP3"
    },
    "2182": {
      "op": "AND"
    },
    "2183": {
      "op": "DUP1"
    },
    "2184": {
      "op": "PUSH2",
      "value": "0x892"
    },
    "2187": {
      "op": "JUMPI"
    },
    "2188": {
      "op": "PUSH1",
      "value": "0x7F"
    },
    "2190": {
      "op": "DUP3"
    },
    "2191": {
      "op": "AND"
    },
    "2192": {
      "op": "SWAP2"
    },
    "2193": {
      "op": "POP"
    },
    "2194": {
      "op": "JUMPDEST"
    },
    "2195": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2197": {
      "op": "DUP3"
    },
    "2198": {
      "op": "LT"
    },
    "2199": {
      "op": "DUP2"
    },
    "2200": {
      "op": "EQ"
    },
    "2201": {
      "op": "ISZERO"
    },
    "2202": {
      "op": "PUSH2",
      "value": "0x8B3"
    },
    "2205": {
      "op": "JUMPI"
    },
    "2206": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "2211": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "2213": {
      "op": "SHL"
    },
    "2214": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2216": {
      "op": "MSTORE"
    },
    "2217": {
      "op": "PUSH1",
      "value": "0x22"
    },
    "2219": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "2221": {
      "op": "MSTORE"
    },
    "2222": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "2224": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2226": {
      "op": "REVERT"
    },
    "2227": {
      "op": "JUMPDEST"
    },
    "2228": {
      "op": "POP"
    },
    "2229": {
      "op": "SWAP2"
    },
    "2230": {
      "op": "SWAP1"
    },
    "2231": {
      "op": "POP"
    },
    "2232": {
      "jump": "o",
      "op": "JUMP"
    }
  },
  "sha1": "917febc6dac6041675021f020992acfb77d9199e",
  "source": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract EMR is Ownable {\n    struct UserDetails {\n        string privateKey;\n        string hashData;\n        bool isActive;\n    }\n\n    event RetrieveHashData(address indexed _from, string indexed _ethToken);\n    event RetrievePrivateKey(address indexed _from, string indexed _ethToken);\n\n    mapping(string => UserDetails) patient; // Unique Token to UserDetails\n\n    function getUserKey(string memory _ehToken)\n        public\n        onlyOwner\n        returns (string memory)\n    {\n        require(patient[_ehToken].isActive, \"No Patient Found!\");\n        emit RetrievePrivateKey(msg.sender, _ehToken);\n        return patient[_ehToken].privateKey;\n    }\n\n    function getUserHashData(string memory _ehToken)\n        public\n        returns (string memory)\n    {\n        require(patient[_ehToken].isActive, \"No Patient Found!\");\n        emit RetrieveHashData(msg.sender, _ehToken);\n        return patient[_ehToken].hashData;\n    }\n\n    function addUserKey(string memory _ehToken, string memory _privateKey)\n        public\n        onlyOwner\n    {\n        patient[_ehToken].privateKey = _privateKey;\n        patient[_ehToken].isActive = true;\n    }\n\n    function addUserHash(string memory _ehToken, string memory _userHash)\n        public\n        onlyOwner\n    {\n        // require userKey\n        require(patient[_ehToken].isActive, \"No Patient Found!\");\n        patient[_ehToken].hashData = _userHash;\n    }\n}\n",
  "sourceMap": "110:1410:2:-:0;;;;;;;;;;;;-1:-1:-1;921:32:0;719:10:1;921:18:0;:32::i;:::-;110:1410:2;;2270:187:0;2343:16;2362:6;;-1:-1:-1;;;;;2378:17:0;;;-1:-1:-1;;;;;;2378:17:0;;;;;;2410:40;;2362:6;;;;;;;2410:40;;2343:16;2410:40;2333:124;2270:187;:::o;110:1410:2:-;;;;;;;",
  "sourcePath": "contracts/EMR.sol",
  "type": "contract"
}